<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myzss blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-05T09:46:29.888Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Myzss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>指针_结构体</title>
    <link href="http://yoursite.com/2018/10/04/%E6%8C%87%E9%92%88-%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://yoursite.com/2018/10/04/指针-结构体/</id>
    <published>2018-10-04T06:17:50.000Z</published>
    <updated>2018-10-05T09:46:29.888Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>内存，以1个字节为单位分配内存</p></li><li><p>每个字节的内存都有标号，这个标号就是地址，也叫指针</p></li><li><p>地址需要存储，32位编译器32位（4字节）存此地址</p><ol><li>64位编译器用64位（8字节）存此地址</li></ol></li><li><p>&amp;a 首地址</p><ol><li>内存编号我们称之为内存地址</li><li>内存中每一个数据都会分配相应的地址</li><li>编码就是对内存的每一个字节分配一个32位或64位的编号</li></ol></li><li><p>char  占一个字节分配一个地址</p></li><li><p>int   占四个字节分配四个地址</p></li><li><p>float   struct  函数  ，数组等</p></li><li><p>指针和指针变量</p><ol><li>内存区的每一个字节都有一个编号，这就是地址</li><li>指针的实质就是内存地址，指针就是地址，地址就是指针</li><li>指针是内存单元的编号，指针变量是存放地址的变量</li></ol></li><li><p>指针是一种数据类型</p></li><li><p>指针指向谁，就把谁的地址赋值给指针</p></li><li><p>野指针—————— 非法操作内存</p><ol><li><img src="/2018/10/04/指针-结构体/TIM截图20181004153917.png" alt="TIM截图20181004153917"></li></ol></li><li><p>空指针</p><ol><li><img src="/2018/10/04/指针-结构体/TIM截图20181004161804.png" alt="TIM截图20181004161804"></li></ol></li><li><p>多级指针</p><ol><li><p><img src="/2018/10/04/指针-结构体/TIM截图20181004163237.png" alt="TIM截图20181004163237"></p></li><li><p><img src="/2018/10/04/指针-结构体/TIM截图20181004164243.png" alt="TIM截图20181004164243"></p></li><li><p><img src="/2018/10/04/指针-结构体/TIM截图20181004165104.png" alt="TIM截图20181004165104"></p></li><li><p><img src="/2018/10/04/指针-结构体/TIM截图20181004170003.png" alt="TIM截图20181004170003">  </p></li><li><p>*p等价于  p[0] ,操作的是指针所指向的内存</p><p><em>p  等价于  </em>（p+0）等价于  p[0]</p></li><li><p>不可以定义void类型的普通变量，不能确定类型 如 void  a </p></li><li><p>可以定义void  <em>  变量，void </em>  指针也称为万能指针</p></li><li><p>void * 可以指向任何类型的变量，使用指针所指向的内存时，最好转换为它本身的指针类型。</p><ol><li><img src="/2018/10/04/指针-结构体/TIM截图20181004171459.png" alt="TIM截图20181004171459"></li><li>第28行  <em> p =  222;，如果不进行类型转换，就会报错，报错原因 是  </em>p  找不到需要分配的内存的大小</li><li>定义了 void  * 类型变量 p  赋值为空指针，  定义了  int 变量a   并将 a的地址赋值给p,赋值给p的时a的首地址，而int类型 是四个字节   </li><li>将 222赋值给  <em>p  因为如果不进行转换，内存找不到需要分配的内存的大小，所以进行类型转换。int </em>  类型指向int类型，在操作时，操作4个字节的内存，如果是void  *  类型，它只获取到了这个a的首地址，而不知道尾地址</li><li>不进行类型转换，无法确定步长</li></ol></li><li><p>指针的大小</p><ol><li>指针的加法，步长由指针指向的数据类型</li><li><img src="/2018/10/04/指针-结构体/TIM截图20181004173148.png" alt="TIM截图20181004173148"></li></ol></li><li><p>const 修饰的指针变量</p><ol><li>const修改的* ,表示指针变量所指向的内存只能够只读</li><li><img src="/2018/10/04/指针-结构体/TIM截图20181004173910.png" alt="TIM截图20181004173910"></li><li>const 修改的指针变量，表示指针变量的值只能够只读</li><li><img src="/2018/10/04/指针-结构体/TIM截图20181004174139.png" alt="TIM截图20181004174139"></li><li><img src="/2018/10/04/指针-结构体/TIM截图20181004174254.png" alt="TIM截图20181004174254"></li><li>表示指针变量的值和所指向的内存都只能够进行只读</li></ol></li><li><p>​</p><p>​</p><p>​</p><p>​</p></li></ol><p>​</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;内存，以1个字节为单位分配内存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个字节的内存都有标号，这个标号就是地址，也叫指针&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;地址需要存储，32位编译器32位（4字节）存此地址&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;64位编译器用64位（8字
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="指针结构体" scheme="http://yoursite.com/tags/%E6%8C%87%E9%92%88%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2018/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/16/设计模式/</id>
    <published>2018-09-16T08:51:48.000Z</published>
    <updated>2018-09-16T10:33:54.427Z</updated>
    
    <content type="html"><![CDATA[<ol><li><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4></li><li><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4></li><li><h4 id="建造模式"><a href="#建造模式" class="headerlink" title="建造模式"></a>建造模式</h4></li><li><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4></li><li><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4></li><li><h4 id="桥梁模式"><a href="#桥梁模式" class="headerlink" title="桥梁模式"></a>桥梁模式</h4></li><li><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4></li><li><h4 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h4></li><li><h4 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h4></li><li><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4></li><li><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4></li><li><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4></li><li><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4></li><li><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4></li><li><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4></li><li><h4 id="调停者模式"><a href="#调停者模式" class="headerlink" title="调停者模式"></a>调停者模式</h4></li><li><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4></li><li><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ol><li>#### </li></ol></li><li><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ol><li><h4 id="定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。"><a href="#定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。" class="headerlink" title="定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。"></a>定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</h4></li></ol></li><li><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4></li><li><h4 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h4></li><li><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4></li><li><h4 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h4><ol><li><h4 id="找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分"><a href="#找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分" class="headerlink" title="找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分"></a>找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分</h4><ol><li><h4 id="代码变化引起的不经意后果变少，系统变得更有弹性。"><a href="#代码变化引起的不经意后果变少，系统变得更有弹性。" class="headerlink" title="代码变化引起的不经意后果变少，系统变得更有弹性。"></a>代码变化引起的不经意后果变少，系统变得更有弹性。</h4></li></ol></li><li><p>针对接口编程而不是针对实现编程</p><ol><li><p>在鸭子类中包含设定行为的方法，可以在运动时动态的改变绿头鸭的飞行行为</p><p>​</p></li></ol></li><li><p>多用组合，少用继承</p><p>​</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://yoursite.com/2018/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/10/数据结构与算法/</id>
    <published>2018-09-10T06:09:26.000Z</published>
    <updated>2018-10-06T03:29:44.497Z</updated>
    
    <content type="html"><![CDATA[<p>数组与矩阵</p><p>​    数组存储地址计算</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911084045.png" alt="TIM截图20180911084045"></p><p>稀疏矩阵：</p><p>​    <img src="/2018/09/10/数据结构与算法/微信截图_20180911084917.png" alt="微信截图_20180911084917"></p><p>数据结构：</p><p>​    线性结构</p><p>​    非线性结构： 树  图 （有可能形成环）</p><p>广义上： 图可以包含树   树 可以包含线性结构</p><p><strong>线性表</strong>    两种存储结构  </p><p>​    顺序存储结构：  顺序表  （开辟了连续的存储空间）</p><p>​    链式存储结构： 链表  ： 单链表    循环链表     双向链表<img src="/2018/09/10/数据结构与算法/微信截图_20180911084917.png" alt="微信截图_20180911084917">            </p><p>​    </p><p>广义表</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911095636.png" alt="TIM截图20180911095636"></p><p>​    其中表的长度就是 所有的元素的个数   （）表示一个</p><p>​    表的深度 表示 （）的层数   同一级的只表示一个</p><p>​    取表头是指的第一个元素   取表尾 除了表头之外的其他元素</p><p>​    </p><p><strong>树与二叉树</strong></p><p>​    结点的度  表示这个结点拥有的孩子结点的数</p><p>​    树的度 ： 所有的结点度中最高的</p><p>​    叶子结点  ，没有孩子结点</p><p>​    分支结点：      <img src="/2018/09/10/数据结构与算法/TIM截图20180911101840.png" alt="TIM截图20180911101840"></p><p>​    内部结点： 既不是根节点也不是叶子结点</p><p>​    父结点    子结点  兄弟结点    层次    </p><p>​    <img src="/2018/09/10/数据结构与算法/TIM截图20180911104034.png" alt="TIM截图20180911104034"></p><p>​    二叉树遍历：</p><p>​    层次遍历</p><p>（前中后遍历表示的是 遍历根结点的顺序）</p><p>​    前序遍历：先遍历根结点，在遍历左子树，再遍历右子树</p><p>​    中序遍历：先遍历左子树，遍历根结点，遍历右子树</p><p>​    后序遍历：先遍历左子树，遍历右子树，遍历根结点<img src="/2018/09/10/数据结构与算法/TIM截图20180911105457.png" alt="TIM截图20180911105457"></p><p>前序结果：12457836</p><p>中序结果:42785136</p><p>后序结果:  48752631</p><p>树转二叉树<img src="/2018/09/10/数据结构与算法/TIM截图20180911110830.png" alt="TIM截图20180911110830"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911111729.png" alt="TIM截图20180911111729"></p><p>最优二叉树（无损压缩）——哈夫曼树</p><p>​    树的路径长度： 树当中的路径</p><p>​    权：某个叶子结点，某种字符出现的频度</p><p>​    带权的路径长度：</p><p>​    </p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911130805.png" alt="TIM截图20180911130805"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911131338.png" alt="TIM截图20180911131338"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911133234.png" alt="TIM截图20180911133234"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911133915.png" alt="TIM截图20180911133915">图</p><p>  图的存储——邻接矩阵</p><p>   用一个n阶方阵R来存放图中国各个结点的关联信息，其矩阵元素Rij  定义为</p><p>   Rij   {    1   若顶点i到顶点j有邻接边</p><p>​        0   若顶点i到顶点j无邻接边    }</p><p>​    <img src="/2018/09/10/数据结构与算法/TIM截图20180911141509.png" alt="TIM截图20180911141528"></p><p>​    </p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180911141528.png" alt="TIM截图20180911141528"><img src="/2018/09/10/数据结构与算法/TIM截图20180911141609.png" alt="TIM截图20180911141609"></p><p>​    图的遍历：</p><p>​    最小生成树：普利姆算法</p><p>​    一个树如果有n个结点，她应该有n-1条边</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912170712.png" alt="TIM截图20180912170712">  </p><p>拓扑排序类似于操作系统的前趋图，只有当前一个任务完成之后，才能够执行后续的任务，有向边表示活动之间开始的先后关系。如  0 任务完成之后，2 和1 任务可以并行执行，可先可后，而只有2,1 任务完成后才能够执行4任务，当1，4任务完成后才能执行3任务，依次类推。</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912172659.png" alt="TIM截图20180912172659"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912172643.png" alt="TIM截图20180912172643"></p><p>算法：    特性：有穷性（有穷步后结束）   </p><p>​            确定性（每条）  输入（&gt;=0）输出（&gt;=1）</p><p>​        有效性：算法的每个步骤都能有效执行并能得到确定的结果</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912174839.png" alt="TIM截图20180912174839"></p><p><strong>排序与查找</strong><img src="/2018/09/10/数据结构与算法/TIM截图20180912175536.png" alt="TIM截图20180912175536"></p><p>折半查找时，如果是1-7 则第一次时 1+7/2 = 4 ,第二次操作判断是在2-3还是在4-6之间…..如果是1-8之间进行折半则 1+8/2 =4.5  则关键字为4 需要进行舍操作。</p><p>折半查找在查找成功时关键字的比较次数最多为   | log2n | +1 次（实际计算）</p><p>折半查找的时间复杂度为    o(log2n)</p><p>算法基础与常见算法</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912180654.png" alt="TIM截图20180912180645"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180912180645.png" alt="TIM截图20180912180645"></p><p><strong>排序</strong></p><table><thead><tr><th>插入排序</th><th>交换类排序</th><th>选择类排序</th><th>归并和基数排序</th></tr></thead><tbody><tr><td>直接插入排序</td><td>冒泡排序</td><td>简单选择排序</td><td></td></tr><tr><td>希尔排序</td><td>快速排序</td><td>堆排序</td></tr></tbody></table><p>常见的算法时间度大小</p><p>​            o(1) &lt;   o(log2n)  &lt;o(n)  &lt;  o(nlog2n)  &lt;  o(n^2)  &lt;  o(n^3)  &lt;  o(2^n)</p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915091442.png" alt="TIM截图20180915091442"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915082931.png" alt="TIM截图20180915082931"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915083729.png" alt="TIM截图20180915083729"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915083912.png" alt="TIM截图20180915083912"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915085805.png" alt="TIM截图20180915085805"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915085922.png" alt="TIM截图20180915085922"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915085932.png" alt="TIM截图20180915085932"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915085940.png" alt="TIM截图20180915085940"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915090034.png" alt="TIM截图20180915090034"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915090953.png" alt="TIM截图20180915090953"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915091353.png" alt="TIM截图20180915091353"></p><p><img src="/2018/09/10/数据结构与算法/TIM截图20180915092029.png" alt="TIM截图20180915092029"></p><p>希尔排序，直接插入排序只有在排序后才能够确保全部序列以及前k个元素的最终排列，快速排序采用分治算法，常用递归算法实现，该算法根据枢轴进行规划，第一趟划分结束后得到了两个子序列，一个序列中的元素均不大于另一个子序列中的元素，枢轴元素介于这两个子序列之间。若仅需得到最终序列的前k个元素，每次得到枢轴元素位置后再考虑下一步的排序过程，在算法的流程控制上比较复杂，对于只得到最终序列的前k个元素，堆排序比较简单。</p><p>对于具有最优子结构和重叠子问题的问题，可以用<strong>动态规划</strong>进行求解，求解过程中通常需要建立最优子结构的递归关系。分治算法的基本思想是将原问题分解为若干规模最小但结构与原问题相似的子问题。递归地解决这些子问题，然后将和谐子问题的解组合为原问题的解。</p><p><strong>回溯算法</strong>也称为试探算法，该算法首先放弃关于问题规模大小的限制，并将问题的候选解按某种次序逐一枚举和检验。当发现当前候选解不可能是解时，就选择下一个候选解，若当前候选解除了还不满足问题规模要求外，满足所有其他要求时，继续扩大当前候选解的规模，并继续试探。用回溯算法找解的算法常常被编写成递归函数。</p><p><strong>贪心算法</strong>是一种不追求最优解，而是希望得到最满意的解的方法。贪心算法一般可以快速得到满意的解，因为它省去了为找最优解要穷尽所有可能而必须耗费大量的时间。贪心法不要回溯。因此贪心算法策略与递归技术的联系最弱。</p><p>贪心：总是做出在当前来说是最好的选择，而并不从整体上进行考虑，它所做的每步选择只是当前步骤的局部最优选择，但从整体来说不一定是最优的选择，由于它不必为了寻找最优解而穷尽所有可能解，因此耗费的时间少，一般可以快速得到满意的解，但得不到最优解</p><p>回溯；是一种选优搜索法，按选优条件向前搜索，以达到目标，但当搜索到某一步时，返现原先选择并不是最优或者达不到目标，就退回一步重新选择，这种走不通就退回再走的技术就是回溯</p><p>​    试探部分： 满足除规模之外的所有条件，则扩大规模</p><p>​    回溯部分 :缩小规模      当前规模解不是合法解时回溯  2  求完一个解，要求下一个解时，也要进行回溯。</p><p>​    动态规划：在求解问题时，对于每一步的决策，列出各种可能的局部解，再依据某种判定条件，舍弃那些肯定不能够得到最优解的局部解，在每一步都经过筛选，以每一步都是最优解来保证全军都是最优解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组与矩阵&lt;/p&gt;
&lt;p&gt;​    数组存储地址计算&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/10/数据结构与算法/TIM截图20180911084045.png&quot; alt=&quot;TIM截图20180911084045&quot;&gt;&lt;/p&gt;
&lt;p&gt;稀疏矩阵：&lt;/p&gt;
&lt;p&gt;​
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据流图</title>
    <link href="http://yoursite.com/2018/09/10/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/09/10/数据流图/</id>
    <published>2018-09-10T03:35:23.000Z</published>
    <updated>2018-09-25T08:43:35.726Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>数据流图基本概念：    </p></li><li><p>数据字典</p></li><li><p>数据字典条目定义形式</p><p>| 符号                   | 含义          | 说明                             |<br>| ——————– | ———– | —————————— |<br>| =                    | 被定义为        | x=a+b x 被定义为a+b形式              |<br>| +                    | 与,表示顺序连接的关系 | x=a+b,表示x由a和b组成                |<br>| […,…]或[…|…] | 或，代表从中选择一个  | x=[a,b] ,x =[a|b] 表示x由a或者由b组成 |<br>| {….}               | 重复          | x={a},表示x由0个或者n个a组成            |<br>| （…）                | 可选          | x=(a)  表示a 可在x中出现，也可以不出现       |</p><p>​</p></li><li><p>数据平衡原则：</p><p>父图和子图的平衡表示：父图的输入/输出数据流与子图的输入/输出数据流一致，有时看起来不一致，但通过查验数据字典可能发现时一致的。</p><p>UML ： 关联和聚合的关系和不同</p><p>关联关系： 关联表示两个类的实例之间存在的某种语义上的联系，如一个老师为某个学校工作，一个学校有多间教室，认为老师与学校，学校与教室之间存在着关联关系，关联关系为类之间的通信提供了一种方式，它是所有关系中最通用，语义最弱。关联关系通常又包含了聚集关系和组合关系</p><p>​    聚集关系： 是关联关系的特例，聚集关系表示一种整体和部分的关系。如一个电话机包含一个话筒，一个电脑包含显示器，键盘和主机都是聚合关系</p><p>​       组合关系： 如果聚集关系中表示部分的类存在，与表示整体的类有紧密的关系，如公司和部门之间的关系，就应该使用组合关系来表示</p><p>关联与聚集之间的不同点在于：</p><p>​    聚集表示部分与整体关系的关联，若从生命周期的角度考虑，则关联对象的生命周期一般无必然联系，聚集的整体对象往往对部分对象的生命周期负责（特指组合）</p></li></ol><p>数据字典是指对数据的数据项，数据结构，数据流，数据存储，处理逻辑，外部实体等进行定义和描述，其目的是对数据流图中的各个元素做出详细的说明，使用数据字典为简单的建模项目器条目有 数据流，数据项，数据存储，基本加工等。</p><p>​    数据流图的原则：</p><p>​    1 数据守恒原则</p><p>​        对任何一个加工来说，其所有输出数据流中的数据必须能从改加工的输入数据流中直接获得，或者说通过该加工能产生的数据</p><p>​    2 守恒加工原则</p><p>​        对同一个加工来说，输入与输出名字必须不相同，即是它们的组成成分相同</p><p>​    3 对每个加工，必须既有输入数据流，又有输出数据流</p><p>​    4外部实体与外部实体之间不存在数据流</p><p>​    5外部实体与外部存储之间不存在数据流</p><p>​    6数据存储与数据存储之间不存在数据流</p><p>​    7父图与子图的平衡原则</p><p>​    8数据流与加工有关，且必须经过加工</p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据流图基本概念：    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据字典&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据字典条目定义形式&lt;/p&gt;
&lt;p&gt;| 符号                   | 含义          | 说明                
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件工程-数据流图" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计</title>
    <link href="http://yoursite.com/2018/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/09/10/面向对象设计/</id>
    <published>2018-09-10T03:32:11.000Z</published>
    <updated>2018-10-03T10:03:52.774Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>设计原则</th><th>内容</th></tr></thead><tbody><tr><td></td><td>设计目的单一的类（避免紧耦合）</td></tr><tr><td></td><td>对扩展开放，对修改封闭</td></tr><tr><td>李氏替换原则</td><td>子类可以替换父类（子类继承了父类的方法，且拥有自己方法，可以替换父类），而替换时需要子类不要大量的进行重载</td></tr><tr><td></td><td>要依赖于抽象，而不具体实现；针对接口编程，不要针对实现编程（依赖于接口，使操作灵活）</td></tr><tr><td>接口隔离原则</td><td>使用多个专门的接口比使用单一的总接口要好（接口单一的做一件事情，不会出现疏漏）</td></tr><tr><td>组合重用原则</td><td>要尽量使用组合，而不是继承关系达到重用目的（继承是一个紧耦合关系，因为父类一变，子类跟着变）</td></tr><tr><td>迪米特原则（最少知识法则）</td><td>一个对象应当对其他对象有尽可能少的了解（信息隐蔽）</td></tr></tbody></table><p>UML :</p><p>  规则，公共机制（包含规格说明，修饰，公共分类，扩展机制 ）</p><p>  构造块:事务：结构事物，行为事物，分组事物，注释事物</p><p>​          关系：依赖，关联，泛化，实现</p><p>​        图：  </p><table><thead><tr><th>种类</th><th>图</th></tr></thead><tbody><tr><td>需求分析图</td><td>用例图（系统和外界的交互，有时被称为静态，有时被称为动态多）</td></tr><tr><td>静态结构图</td><td>类图（表述类中的属性方法）</td></tr><tr><td></td><td>对象图（表述对象之间的方法）</td></tr><tr><td></td><td>包图（包与包之间的关系，以及包内部的结构）</td></tr><tr><td></td><td>组合结构图</td></tr><tr><td></td><td>构件图</td></tr><tr><td></td><td>部署图（表述的软件的部件应该部署到那个硬件上）</td></tr><tr><td></td><td>制品图</td></tr><tr><td>动态行为图</td><td>顺序/序列图（强调时间关系）</td></tr><tr><td></td><td>通信/协作图（相同，与顺序区别：通信图没有强调时间关系）</td></tr><tr><td></td><td>定时图</td></tr><tr><td></td><td>状态图（状态的变迁）</td></tr><tr><td></td><td>活动图（流程图的结构一致）</td></tr><tr><td></td><td>交互概览图</td></tr></tbody></table><p>设计模式：</p><p>（    被用来在特定情况下解决一般设计问题的类和相互通信的对象的描述。一般而言一个设计模式有4个基本要素：模式名称，问题（模式的使用场合），解决方案和效果</p><p>设计模式是人们可以简单方便的复用成功的设计和体系结构，将已经证实的技术表述成设计模式，也会使新系统的开发者更加易于理解其设计思路。设计模式可以帮助开发者做出有利于复用的选择，避免设计时损害系统复用性。）</p><p>​    架构模式： 软件设计中高层决策，如c/s 结构属于架构模式，架构模式反映了开发系统过程中所作的基本设计决策（全局的看待问题，解决问题）</p><p>​      设计模式：主要关注软件系统的设计，与具体的实现语言无关（局部的设计问题，进行构件设计时，会用到设计模式）</p><p>​    设计模式具有  适应需求变化的优点。</p><p>​     惯用法： 最底层的模式，关注软件系统的设计与实现，实现是通过某种特定的程序语言来描述构件与构件之间的关系，每种编程语言都有自己特定的模式，即语言的惯用法 ，如引用计数就是c++ 语言中的一种惯用法（与语言相关）</p><p>设计模式分类：</p><p>​    </p><table><thead><tr><th>分类</th><th>设计模式</th><th>内容</th><th>简化记忆</th><th>内容</th></tr></thead><tbody><tr><td>创建型模式（即用于创建对象的模式为设计类的实例化新对象）只是用new 来创建对象，往往灵活度不够</td><td><strong>工厂方法模式</strong>Factory Method</td><td>定义一个创建对象的接口，但是由子类决定需要实例化哪一个对象，工厂方法把类的实例化推迟到了子类</td><td>披萨加盟店</td><td>所有的工厂模式都用来封装对象的床架你，工厂方法模式通过让子类决定该对象的创建对象是什么，来达到将对象创建的过程封装的目的<img src="/2018/09/10/面向对象设计/TIM截图20180926162742.png" alt="TIM截图20180926162742"></td></tr><tr><td></td><td>抽象工厂模式Abstract Factory</td><td>提供一个接口，用于创建相关或相互依赖对象的家族，无需指定他们具体的类</td><td></td><td>允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产出的具体产品是什么，这样，客户和具体产品将被解耦</td></tr><tr><td></td><td>原型模式  Prototype</td><td>用原型实例指定创建对象的类型，并且通过拷贝这个原型为对象</td><td></td><td></td></tr><tr><td></td><td>单例模式Singleton</td><td>保证一个类只有一个实例，并提供一个访问它的全局访问点</td><td>独一无二</td><td>同步方法 （性能低）       急切实例 （静态变量，一运行就加载）   双重检查加锁（要求版本1.2以上）</td></tr><tr><td></td><td>构建器模式  Builder</td><td>将一个复杂类的表示与其构造相分离，是的相同的构建过程能够得出有不同的表示</td><td></td><td></td></tr><tr><td>结构型模式（）</td><td><strong>适配器模式</strong>Adapter</td><td>将一个类的接口转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以合作无间</td><td>转换接口</td><td>火鸡与鸭子 集合中的Enumeration和Iterator</td></tr><tr><td></td><td>桥接模式Bridge</td><td>将类的抽象部分和它的实现部分分离开来，使他们可以独立地变化</td><td>继承树拆分</td><td></td></tr><tr><td></td><td>组合模式Composite0</td><td>将对象组合成树型结构以表示<strong>整体部分</strong>的层次结构，使得用户对单个对象和组合对象的使用具有一致性</td><td>树形目录结构</td><td></td></tr><tr><td></td><td>装饰模式Decoratoer</td><td>动态地将责任附加到对象上，若要扩展功能，装饰着提供了比继承更有弹性的替代方案</td><td>附加职责（星巴克咖啡）</td><td><img src="/2018/09/10/面向对象设计/TIM截图20180928162143.png" alt="TIM截图20180928162143"></td></tr><tr><td></td><td>外观模式Facade</td><td>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。（避免了紧耦合）</td><td>对外统一接口（提供一个简单的接口，让子系统更容易使用）</td><td><img src="/2018/09/10/面向对象设计/TIM截图20180928162628.png" alt="TIM截图20180928162628"></td></tr><tr><td></td><td>享元模式Flyweight</td><td>提供支持大量细粒度对象共享的有效方法</td><td></td><td></td></tr><tr><td></td><td>代理模式Proxy</td><td>为其他对象提供一种代理以控制整个对象的访问</td><td></td><td></td></tr><tr><td>行为型模式（描述类或对象的交互、职责的分配）</td><td>职责链模式chain of responsibility</td><td>通过给各个对象处理请求的机会，减少请求的发送者与接收者之间的耦合机会。将接收者对象链接起来，在链中传递请求，直到有一个对象处理这个请求</td><td>传递职责</td><td></td></tr><tr><td></td><td>命令模式command</td><td>讲一个请求封装成一个对象，从而可以用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作</td><td>日志记录，可撤销</td><td></td></tr><tr><td></td><td><strong>解释器模式</strong>Interpreter</td><td>给定一种语言，定义它的文法表示，并定义一个解释器，改解释器用来根据文法表示来解释语言中的句子</td><td></td><td></td></tr><tr><td></td><td>迭代器模式Iterator</td><td>提供一种方法顺序访问一个聚合对象中的各个元素而不需要暴露改对象的内部表示</td><td>迭代器模式让我们能够游走于聚合内的每一个元素，而又不暴露其内部的表示，把游走的任务放在迭代器上，而不是聚合上。这样简化了聚合的接口和实现，也让责任各得其所。</td><td>两个餐厅的存放数据的格式不同，一个使用数组，一个使用list 集合，合并之后，通过服务员来响应菜单内容时，需要两次循环。两个类都实现iterator接口，创建一个新的接口，与服务员解耦合，两个餐厅都实现这个接口，并实现createIterator方法。<img src="/2018/09/10/面向对象设计/TIM截图20180930153527.png" alt="TIM截图20180930153527"></td></tr><tr><td></td><td>中介者模式Mediator</td><td>用一个中介对象来封装一系列的对象交互。它使各对象不需要显式的相互调用，从而达到低耦合，还可以独立地改变对象间的交互</td><td>不直接引用</td><td></td></tr><tr><td></td><td>备忘录模式Memento</td><td>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态</td><td></td><td></td></tr><tr><td></td><td>观察者模式Observer</td><td>定义对象间的一种<strong>一对多</strong>的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新</td><td>报纸订阅服务</td><td></td></tr><tr><td></td><td>状态模式State</td><td>允许一个对象在其内部状态改变时改变它的行为</td><td></td><td>策略模式和状态模式是双胞胎，在出生时才分开。策略模式式围绕可以互换的算法来创建成功业务的。然而状态是通过改变对象内部的状态来帮助对象控制自己的行为。</td></tr><tr><td></td><td>策略模式Strategy</td><td>定义一系列算法，把它们一个个封装起来，并且使它们之间可互相替换，从而让算法可以独立于使用它的用户而变化（理解：对于变化的需求，对算法进行封装，使它能够对于不同的需求都能够满足，也就是说有不同的方案）</td><td>多方案切换（Duck）</td><td>分别封装行为接口，实现算法族，超类里存放行为接口对象，在子类中具体设定行为对象，原则：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为算法的变化独立于算法的使用者。</td></tr><tr><td></td><td><strong>模板方法模式</strong>Template Method</td><td>定义一个操作中算法骨架，而将一些步骤延迟doa子类中，使得子类可以不改变一个算法的结构即可重新定义算法的某些特定步骤</td><td>模板方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现</td><td>泡咖啡和泡茶抽象出咖啡因基类    策略模式和模板方法模式都封装了算法，一个使用了组合，一个使用了继承<img src="/2018/09/10/面向对象设计/TIM截图20180928172755.png" alt="TIM截图20180928172755"></td></tr><tr><td></td><td>访问者模式Visitor</td><td>表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作</td><td></td></tr></tbody></table><h4 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h4><ol><li><h4 id="找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分"><a href="#找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分" class="headerlink" title="找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分"></a>找出应用中需要变化的地方，把他们独立出来，八步摇和那些不需要变化的代码混在一起。把会变化的部分封装起来，避免影响其他部分</h4><ol><li><h4 id="代码变化引起的不经意后果变少，系统变得更有弹性。"><a href="#代码变化引起的不经意后果变少，系统变得更有弹性。" class="headerlink" title="代码变化引起的不经意后果变少，系统变得更有弹性。"></a>代码变化引起的不经意后果变少，系统变得更有弹性。</h4></li></ol></li><li><p>针对接口编程而不是针对实现编程</p><ol><li>在鸭子类中包含设定行为的方法，可以在运动时动态的改变绿头鸭的飞行行为</li></ol></li><li><p>多用组合，少用继承</p></li><li><p>为了交互对象之间的松耦合设计而努力</p></li><li><p>类应该对扩展开放，对修改关闭——装饰模式</p></li><li><p>要依赖抽象，不要依赖具体类(思想的倒置)——工厂模式</p><ol><li>变量不要持有具体类的引用</li><li>不要让类继承自具体类，要继承自抽象类</li><li>不要覆盖基类中已经实现的方法</li></ol></li><li><p>最少知识原则：只和你的密友谈话——外观模式</p><ol><li>只应该调用属于以下范围的方法<ol><li>该对象本身</li><li>被当做方法的参数而传递进来的对象</li><li>此方法所创建或实例化的任何对象</li><li>对象的任何组件</li></ol></li></ol></li><li><p>好莱坞原则  别电话给我们，我会打电话给你们</p><ol><li>被调用我们，我们会调用你</li><li>是一种防止依赖腐败的方法，允许低层组件将自己挂钩到系统上但是高层组件会决定什么时候和怎样使用这些底层组件。</li><li>低层组件可以参与运算，但是高层组件控制何时以及如何让低层组件参与，低层组件绝对不可以直接调用高层组件。</li></ol></li><li><p>单一原则    一个类应该只有一个引起变化的原因。</p><ol><li>​</li></ol><p>​</p></li></ol><p>​    粗体表示既可以是类模式，也可以是对象模式</p><p>其他的表示只是对象模式</p><p>面向对象程序设计语言为面向对象实现阶段提供支持</p><p>面向对象用例设计阶段  面向对象分析阶段  面向对象需求分析阶段 都可恶意采用建模语言来描述。</p><p>在面向对象语言中，类的实例化是指对类的实例分配存储空间。</p><p>面向对象开发方法有Booch  Coad  和 OMT方法  Jackson 方法是一种面向数据结构的开发方法</p><p>简单工厂方法：将pizza类中变化的部分独立出来形成simplefactory ,在原来的类中加入简单工厂的引用。而简单工厂是对pizza类创建对象变化性的封装。（相对来说，整体完成了创建）</p><p>工厂模式：整体类是一个抽象类，将变化的部分——创建对象部分，使用抽象方法createPizza(type)完成，这样所有的pizza加盟店都必须要实现这个方法。（将对象的创建交给了各个加盟店自己决定）</p><p>抽象工厂模式： orderPizza是一个接口，在我看来是将 工厂模式中的抽象类，转变成了接口，老师说是将不同的地方的抽象工厂进行了抽取，将纽约和芝加哥的抽象工厂，进行了抽取<img src="/2018/09/10/面向对象设计/TIM截图20180926173358.png" alt="TIM截图20180926173358"></p><p>面向对象分析的任务是了解问题域所涉及的对象，对象间的关系和操作，然后构造问题的对象模型（认定并组织对象，描述对象间的相互作用，确定基于对象的操作）</p><p>面向对象程序设计语言为<strong>面向对象实现阶段</strong>提供支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设计目的单一的类（避免紧耦合）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;对扩展开放
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面向对象+设计模式" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>信息安全</title>
    <link href="http://yoursite.com/2018/09/10/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/09/10/信息安全/</id>
    <published>2018-09-10T03:22:44.000Z</published>
    <updated>2018-09-10T03:27:50.089Z</updated>
    
    <content type="html"><![CDATA[<p>安全属性：</p><ol><li>保密性： 最小授权原则，防暴露，信息加密 ，物理保密</li><li>完整性  ：安全协议，验证码 ，密码校验，数字签名 ，公证</li><li>可用性：综合保障（ip 过滤，业务流控制，路由选择控制，审计跟踪）</li><li>不可抵赖性：数字签名</li></ol><p>对称加密技术</p><p>​    （对称加密，使用公钥加密，使用公钥解密）<img src="/2018/09/10/信息安全/TIM截图20180905214631.png" alt="TIM截图20180905214631"></p><p>缺点： 加密强度不高，密钥分发困难</p><p>非对称加密技术</p><p>​        （非对称加密：使用公钥加密，使用私钥解密，使用私钥加密，使用公钥解密）</p><p>平常使用excel ,word 等形式都是使用对称加密技术<img src="/2018/09/10/信息安全/TIM截图20180905215627.png" alt="TIM截图20180905215627"></p><ul><li><p>最突出的特点：加密和解密时 在输入密码时输入的内容一致</p></li><li><p>公钥是共享的 ，大家都能够获取到</p></li><li><p>而私钥是只有自己拥有的</p></li><li><p>甲的公钥加密后的文件，只能够甲的私钥打开</p></li><li><p>相对应的甲的私钥加密后的文件，也只有甲能够打开</p></li><li><p>缺点;加密速度慢</p><p>DES是对称密钥密码算法，它的加密密钥和解密密钥是相同的。RSA是非对称密钥密码算法，它使用不同的密钥分别用于加密和解密数据，还可以用于数字签名。对称密钥密码算法的效率要比非对称密钥密码算法高很多，使用与对文件等大量的数据进行加密。</p></li></ul><ul><li><p>信息摘要：</p><ul><li>​单项散列函数（单向Hash函数)  ，固定长度的散列值</li></ul></li><li><p>​       常用的消息摘要算法： MD5  ,SHA  两个算法的散列值分别为128和160</p></li><li><p>由于SHA通常采用的密钥长度较长，因此安全性高于MD5</p></li><li><p>数字签名：是一种防抵赖技术</p><ul><li>使用A的私钥进行加密的过程，称为数字签名过程</li><li>而使用A的公钥对A的私钥加密后的包的解密过程，称为数字签名的验证</li></ul><p>​数字信封：</p><p>​   对称加密技术用于加密文件的正文，而文件的密钥使用非对称加密技术</p></li></ul><p>（使用对方公钥对文件进行加密，而这个文件，只有对方私钥才能打开）</p><p><img src="/2018/09/10/信息安全/数字信封.png" alt="数字信封"></p><p><img src="/2018/09/10/信息安全/邮件加密.png" alt="邮件加密"></p><p>加密方式传输(对称加密和非对称加密)</p><p>邮件大小，比较大，要对正文使用对称加密技术，并生成随机密钥k ，就需要将随机密钥k 传送给B </p><p>将K通过非对称加密，使用接收方B的公钥进行加密 生成密钥K(数字信封技术)</p><p>接收方B通过自己的私钥解密得到随机密钥K,对邮件正文进行解密</p><p>发送者不可抵赖 涉及到数字签名，第三方无法篡改使用到了 （ 信息摘要）</p><p>对邮件使用信息摘要技术，并用数字签名技术进行加密（使用传送方A的私钥进行加密，这样对方接受到密文后，通过判断谁的公钥可以解密，可以获取到这是谁进行的加密） ,接收方通过数字签名的验证，获取到邮件的信息摘要，接收方B再对之前接收到的邮件进行信息摘要，判断两者是否是一致。</p><p>网络安全：     各个网络层次</p><p><img src="/2018/09/10/信息安全/网络安全.png" alt="网络安全"></p><p>原本的HTTP 协议走的是明文加密方式，易被截获</p><p>现在采用HTTP+SSL 协议的方式进行加密， –   https</p><p>科学院会屏蔽，军方会进行隔离</p><p>两种隧道协议，数据从隧道中传输，相对比较安全</p><p>防火墙：软件,软件+硬件 </p><p>IPSec ：与ip 协议有一些问题，针对IP包进行加密</p><p><img src="/2018/09/10/信息安全/网络威胁1.png" alt="网络威胁1"></p><p><img src="/2018/09/10/信息安全/网络威胁2.png" alt="网络威胁1"></p><p>防火墙    </p><ul><li><p>网络级（工作层次低，工作效率高）</p><ul><li>​包过滤</li><li>​状态监测（tcp-ip 连接信息）</li></ul></li><li><p>应用级（工作层次高，工作效率低）</p></li><li><ol><li><p>双穴主机</p></li><li><p>屏蔽主机</p></li><li><p>屏蔽子网（DHZ 非军事区，主要存放web服务器，邮件服务器）</p><p><img src="/2018/09/10/信息安全/防火墙.png" alt="防火墙"></p></li></ol><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安全属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保密性： 最小授权原则，防暴露，信息加密 ，物理保密&lt;/li&gt;
&lt;li&gt;完整性  ：安全协议，验证码 ，密码校验，数字签名 ，公证&lt;/li&gt;
&lt;li&gt;可用性：综合保障（ip 过滤，业务流控制，路由选择控制，审计跟踪）&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2018/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/09/10/数据库/</id>
    <published>2018-09-10T03:15:16.000Z</published>
    <updated>2018-10-04T06:16:59.059Z</updated>
    
    <content type="html"><![CDATA[<p>事务回滚：</p><p>​    事务是<strong>数据库更新操作的基本单位</strong>，事务回滚是指将该<strong>事物已经完成的对数据库的更新操作撤销</strong>。事务对数据库的操作首先是在缓冲区进行的，由DBMS来实现定期的缓冲区数据写入硬盘数据库的操作，也可由显式的指令来完成，事务的撤销<strong>只涉及到数据库</strong>，不会改变事务中的变量值。</p><p>数据库系统： </p><p>​    <strong>数据库模式</strong>：</p><p>​        三级模式——两级映射属于一种层次性的架构设计（提高了可维护性）<img src="/2018/09/10/数据库/TIM截图20180909153400.png" alt="TIM截图20180909153400"></p><p>内模式:与物理数据库直接关联，主要是处理如何存储数据（按照什么格式去存储数据，如何优化存储）</p><p>所谓的物理数据库在计算机上表现是 文件</p><p>概念模式：数据库中的<strong>表</strong></p><p>外模式：数据库中的<strong>视图</strong></p><p><img src="/2018/09/10/数据库/TIM截图20180909154309.png" alt="TIM截图20180909154309"></p><p>​    <strong>ER模型</strong></p><p><img src="/2018/09/10/数据库/TIM截图20180909155022.png" alt="TIM截图20180909155022"></p><p>ER模型：    </p><p>​    一个实体转换成一个关系模式</p><p>​    1:1    1：n   m:n 练习</p><p>三个以上实体间的一个多元练习</p><p>弱实体定义为一个实体对于另一个实体具有很强的依赖关系，而该实体主键的一部分或全部从其强实体中获得，则称该实体为弱实体。</p><p>​    <strong>关系代数和元组演算</strong></p><p>​      关系代数： 并  交  差   笛卡尔积    投影   选择  联接    <img src="/2018/09/10/数据库/TIM截图20180909163706.png" alt="TIM截图20180909163723"></p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909163723.png" alt="TIM截图20180909163723"></p><p><img src="/2018/09/10/数据库/TIM截图20180909163843.png" alt="TIM截图20180909163843"></p><p>​    <strong>规范化理论</strong>——函数依赖</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909165146.png" alt="TIM截图20180909165146"></p><p>函数的依赖 可以参考 f(x) = x^2  </p><p>x 能够唯一的确定y  但是 y 不能够唯一确定x</p><p>部分函数依赖：</p><p>​    如  学号，课程号  能够唯一确定  姓名    但 学号也能够直接确定姓名</p><p>传递函数依赖：</p><p>​    A  能够唯一确定B   B能够唯一确定C</p><p>但是B不能够唯一确定A,如果这样 AB之间就是等价  就不存在传递依赖</p><p>​    规范化理论的价值和用途：</p><p>​    非规范化的关系模式，可能存在的问题： 数据冗余，更新异常，插入异常，删除异常</p><p>​    </p><p>​    </p><table><thead><tr><th>键</th><th>内容</th><th></th></tr></thead><tbody><tr><td>超键</td><td>能够唯一标识元组（可以是属性的组合或单个属性）</td><td>要求低</td></tr><tr><td><strong>候选键</strong></td><td>唯一标识元组</td><td>超键和候选键区别是 超键可能存在冗余属性，消除了多于属性就是候选键</td></tr><tr><td></td><td></td><td>主键和候选键之间的区别主键只有一个，候选键可以有多个（任选一个）</td></tr><tr><td></td><td></td><td>其他关系的主键</td></tr></tbody></table><p>重点：——求候选键</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909171849.png" alt="TIM截图20180909171849"></p><p>将关系模式的函数依赖关系用 有向图的方式 表示</p><p><strong>找入度为 0 的属性</strong>，并以该属性集合未起点，尝试遍历有向图，若能正常遍历图中所有结点，则该属性集即为关系模式的候选键</p><p>若入度为0的属性集不能遍历图中所有结点，则需要尝试的将一些中间结点（既有入度，又有出度的结点）并入入度为0的属性集中，直至<strong>该集合能遍历所有结点</strong>，集合候选键</p><p>​    <strong>范式</strong>：越往上越规范，但相对的数据的力度减小，一般到第三范式</p><p>​        </p><table><thead><tr><th>范式名称</th><th>内容</th><th>详细</th><th>示例</th></tr></thead><tbody><tr><td>1NF</td><td>属性值都是不可分的原子值</td><td>第一范式：在关系模型R中，当且仅当所有域只包含原子值，即每个分量都是不可再分的数据项，则称R是第一范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204933.png" alt="TIM截图20180909204933"></td></tr><tr><td>2NF</td><td>消除非主属性对候选键的部分依赖（部分依赖一般都是组合键）</td><td>当且仅当R是第一范式，且每一个非主属性完全依赖主键（不存在部分依赖）时，则称为R 是第二范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204945.png" alt="TIM截图20180909204945"></td></tr><tr><td>3NF</td><td>消除非主属性对候选键的传递依赖</td><td>当且仅当R是第一范式，且E中没有非主属性传递依赖于码时，则称R是第三范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204957.png" alt="TIM截图20180909204957"></td></tr><tr><td>BCNF</td><td>消除主属性对候选键的传递依赖</td><td>BC范式，设R是一个关系模式，F是它的依赖集，R属于BC范式当且仅当F中每个依赖的决定因素必定包含R的某个候选码</td><td><img src="/2018/09/10/数据库/TIM截图20180909205008.png" alt="TIM截图20180909204957"></td></tr></tbody></table><p>​    模式分解：</p><p>​     保持函数依赖分解：设数据库模式P={R1,R2,R3……Rk}是关系模式R的一个分解，F是R上的函数的依赖集，P中每个模式Ri上的FD集时Fi 。如果{F1,F2,……FK} 与F是等价的（相互逻辑蕴涵），那么称分解P保持FD</p><p>​    无损分解：有损指不能还原，无损指可以还原</p><p>​    无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180910155447.png" alt="TIM截图20180910155447"></p><p><img src="/2018/09/10/数据库/TIM截图20180910155514.png" alt="TIM截图20180910155514"></p><p>​    <strong>一分为二：</strong>：</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180910160041.png" alt="TIM截图20180910160041"></p><p><strong>并发控制：</strong></p><p>事务：</p><table><thead><tr><th>cuid</th><th>内容</th></tr></thead><tbody><tr><td>原子性</td><td>看作是原子，不可拆分，要么全做，要么不做</td></tr><tr><td>一致性</td><td>事务执行之前数据保持一致的状态，在事务执行之后数据的状态也要保持一致</td></tr><tr><td>隔离性</td><td>事务之间独立进行，互不影响</td></tr><tr><td>持续性</td><td>事务执行之后的影响是持续的</td></tr></tbody></table><p>​    并发产生的问题：</p><table><thead><tr><th>问题</th><th>内容</th></tr></thead><tbody><tr><td>丢失更新</td><td></td></tr><tr><td>不可重复读</td><td></td></tr><tr><td>读脏数据</td></tr></tbody></table><p>​    <img src="/2018/09/10/数据库/TIM截图20180910161922.png" alt="TIM截图20180910161922">         </p><p>​    解决方案： 封锁协议： S封锁 （读锁）   X封锁（写锁）</p><p>写锁之上不能加任何锁        读锁之上可以加读锁</p><table><thead><tr><th></th><th>内容</th></tr></thead><tbody><tr><td>一级封锁协议</td><td>事务T在修改数据R之前必须先对其加x锁，直到事务结束才释放。可防止丢失修改</td></tr><tr><td>二级封锁协议</td><td>一级封锁协议加上事务T在读取数据R之前先对其加s锁，读完后即可释放s锁。可防止丢失修改，还可防止读取脏数据</td></tr><tr><td>三级封锁协议</td><td>一级封锁协议加上事务T在读取数据R之前先对其加s锁，直到事务结束才释放。可以防止丢失修改，防止读脏数据与防止数据重复读</td></tr><tr><td>两段封锁协议</td><td>可串行化，可能发生死锁</td></tr></tbody></table><p>死锁问题：</p><p><img src="/2018/09/10/数据库/TIM截图20180910133240.png" alt="TIM截图20180910133146"></p><p>​    <img src="/2018/09/10/数据库/TIM截图20180910133240.png" alt="TIM截图20180910133240"><em><img src="/2018/09/10/数据库/TIM截图20180910133249.png" alt="TIM截图20180910133249"></em><img src="/2018/09/10/数据库/TIM截图20180910133146.png" alt="TIM截图20180910133146"><strong>数据库完整性约束</strong>    为了提高数据可靠性，前三种只能够简单的约束</p><p>​    实体完整性约束（通过给实体定义主键完成约束的是主键，主键不能够为空）</p><p>​    参照完整性约束（设置外键）</p><p>​    用户自定义完整性约束（设置属性的一些约束，如年龄不超过20）</p><p>​    （触发器）</p><p>数据库安全：​</p><table><thead><tr><th>措施</th><th>说明</th></tr></thead><tbody><tr><td>用户标识和鉴定</td><td>最外层的安全保护措施，可以使用用户账户，口令以及随机数检验等方式</td></tr><tr><td></td><td>对用户进行授权，包括操作类型（查找，插入，删除，修改等）和数据对象（主要是数据范围）的权限</td></tr><tr><td>密码存储的传输</td><td>对远程终端信息用密码传输</td></tr><tr><td></td><td>对视图进行授权</td></tr><tr><td>审计</td><td>使用一个专用文件或数据库，自动将用户对数据库的所有操作记录下来</td></tr></tbody></table><p><strong>数据备份：</strong>：<img src="/2018/09/10/数据库/TIM截图20180910163733.png" alt="TIM截图20180910163733"></p><p><img src="/2018/09/10/数据库/TIM截图20180910163744.png" alt="TIM截图20180910163744">    </p><p><img src="/2018/09/10/数据库/TIM截图20180910164832.png" alt="TIM截图20180910164832">分布式数据库**</p><p>​    <strong>数据仓库与数据挖掘</strong></p><p>​    <img src="/2018/09/10/数据库/TIM截图20180910170409.png" alt="TIM截图20180910170409"></p><p><img src="/2018/09/10/数据库/TIM截图20180910170344.png" alt="TIM截图20180910170344"></p><p>反规范化： 由于规范化使表不断的拆分，导致数据表过多，提高了增删改的速度，但是会增加查询的工作量，系统需要进行多次连接，才能进行查询，是系统效率下降。</p><p>​    技术： 增加派生性冗余列    增加冗余列    重新组表      分割表<img src="/2018/09/10/数据库/TIM截图20180911082550.png" alt="TIM截图20180911082550"></p><p>序言性注释给出程序的整体说明，对于理解程序具有引导作用。</p><p>嵌入在程序中的sql 语句  是 数据库系统提供的一种应用程序接口，不是注释</p><p>数据库系统的安全措施主要有权限机制，视图机制以及数据加密三个方面。通过权限机制，限定用户对数据的操作权限，把数据的操作限定在具有指定权限的用户范围内。在标准sql中定义了授权语句GRANT来实现权限管理，通过建立用户视图，用户或应用程序只能通过视图来操作数据，保证了视图之外的数据的安全性。对数据库的数据进行加密，可以防止数据在存储和传输过程中失密。</p><p>数据库的完整性是指数据的正确性和数据的安全性。如学生的性别只能是男和女百分制只能在0-100整数值之间取值。为了防止错误数据进入到数据库，dbms提供了完整性约束机制，通过对数据库表结构进行约束，当对数据进行修改时由系统对修改数据进行完整性检查，将错误数据决绝到数据库之外。在数据库管理系统中，完整性约束不属于安全性控制机制，属于完整性约束机制。</p><p>联机分析处理OLAP是一种软件技术，它使分析人员能够迅速，一致，交互的从各个方面观察信息，以达到深入理解数据的目的。</p><p>DBMS主要是实现对共享数据有效的组织管理和存取，因此DBMS应具有数据定义，数据库操作，数据库运行管理，数据组织与存储管理和数据库的建立和维护等功能。其中DBMS提供数据定义语言（data definition language DDL）用户可以对数据库的结构进行描述，包括外模式，模式和内模式的定义，数据库的完整性定义，安全保密定义，如口令，级别和存取权限等，这些定义存储在数据字典中，是DBMS运行的基本依据。DBMS向用户提供数据操纵语言（Data Manipulation Language, DML)  实现对数据库中数据的基本操作如检索，插入，修改和删除。DML分为 宿主型和自含型 宿主型值将DML语言嵌入某种主语言如c  cobol等 中使用，自含型是指可以单独使用dml语句，供用户交互使用。总之，任何一个dbms都应当提供给使用者建立数据库的功能，称为数据库的定义。在sql标准中，通过数据库定义语言来实现。</p><p>为了保证数据库中数据的安全可靠和正确有效，数据库管理系统DBMS提供数据库恢复，并发控制，数据完整性保护与数据安全性保护等功能。数据库库在运行过程中由于软硬件故障可能造成数据被破坏，数据库恢复就是在尽可能短的时间内吧数据库恢复到故障前发生的状态。 </p><p>数据库中，只有数据文件与日志文件</p><p>数据文件用来存放实实在在需要存储的数据。而日志文件是存的操作记录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事务回滚：&lt;/p&gt;
&lt;p&gt;​    事务是&lt;strong&gt;数据库更新操作的基本单位&lt;/strong&gt;，事务回滚是指将该&lt;strong&gt;事物已经完成的对数据库的更新操作撤销&lt;/strong&gt;。事务对数据库的操作首先是在缓冲区进行的，由DBMS来实现定期的缓冲区数据写入硬盘数据
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>程序语言</title>
    <link href="http://yoursite.com/2018/09/10/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/09/10/程序语言/</id>
    <published>2018-09-10T03:08:33.000Z</published>
    <updated>2018-09-17T09:49:13.691Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理：</p><p>​    程序错误分为语法错误和语义错误（逻辑错误）</p><p>语法错误是语句形式上的错误，语义错误是含以上的错误（逻辑错误）</p><p>在高级程序设计语言中，语句用于描述程序中的运算步骤，控制结构以及数据传输</p><p> 程序设计语言的语法是语言的外观，给出语言的语法意味着给出语句，声明和其他语言结构的书写规则。</p><p>语义则表示不同的语法结构的含义。在程序语言的手册中，语言的描述都是围绕着语法结构展开的。通常先给出各种语句结构的语法，然后给出对应该结构的语义以描述内在含义。语用是关于程序与使用者之间的<code>关系。</code></p><p>逻辑式语言是一类以形式逻辑为基础的语言。</p><p>函数式语言以补演算为基础</p><p>命令式原因是基于动作的语言，在这种语言中，计算被看成是动作的序列。</p><p>因此通过指明一系列可执行的运算及运算的次序来描述计算过程是命令式语言的特点。</p><p>函数是一种对应原则（映射），它使定义域中每个元素和值域中唯一的元素相对应。函数式语言是一类以r(兰布达  入) 演算为基础的语言，其代表是LISP，主要用于人工智能领域。    </p><p>逻辑型语言是一类以形式逻辑为基础的语言，其代表是建立在关系理论和一阶谓词理论基础上PROLOG,PROLOG 有很强的推理功能，适用于书写自动定理证明，专家系统和自然语言理解等问题的程序。</p><p>编译与解释</p><p>文法</p><p><strong>正规式</strong></p><p>有限自动机在识别功能上等价于正规文法，也等价于一个特殊类型的语言产生器-正则表达式，它是描述词法的有效工具，也是进行词法分析的理论基础。</p><p><strong>表达式</strong></p><p><strong>传值与传地址</strong></p><p>多种程序语言特点</p><p>编译过程分为解释型和编译型</p><p>解释型是当语句编写后回车运行就会之后后台的功能</p><p>编译型是当代码全部编写完毕后点击编译运行生成目标文件</p><p>编译：源程序——词法分析（保障词关键词）——语法分析（语法如if下无elseif或者缺少符号）——语义分析（如循环是否有终止条件一部分的问题)——中间代码生成——代码优化——目标代码生成——目标程序</p><p><img src="/2018/09/10/程序语言/TIM截图20180914163928.png" alt="TIM截图20180914163928"></p><p>文法定义：</p><p><img src="/2018/09/10/程序语言/TIM截图20180914164039.png" alt="TIM截图20180914164039"></p><p><img src="/2018/09/10/程序语言/TIM截图20180914164048.png" alt="TIM截图20180914164048"></p><p><img src="/2018/09/10/程序语言/TIM截图20180914164110.png" alt="TIM截图20180914164110"></p><p><img src="/2018/09/10/程序语言/TIM截图20180914172407.png" alt="TIM截图20180914172407"></p><p><img src="/2018/09/10/程序语言/TIM截图20180914173302.png" alt="TIM截图20180914173302">、</p><p><img src="/2018/09/10/程序语言/TIM截图20180914173451.png" alt="TIM截图20180914173451"></p><p><img src="/2018/09/10/程序语言/TIM截图20180914173733.png" alt="TIM截图20180914173733"></p><p>while循环也称为当型循环 while循环执行次数比循环条件次数少1 ，do-while循环执行次数等于循环条件的判断次数</p><p>程序设计语言规定其程序中的数据必须具有类型好处：</p><p>​    1 有利于在翻译程序的过程中为数据合理分配存储单元，因为程序设计语言为不同的额数据类型规定了其所占的存储空间，如果数据类型确定，其所占的存储空间也是确定的</p><pre><code>有利于对参与表达式计算的数据对象进行检查，因为知道数据的数据类型可以根据类型判断数据是否可以参与某表达式运算，如自加自减运算不允许时浮点数等</code></pre><p>​    有利于规定数据对象的取值范围以及能够进行的运算，根据数据类型，可以知道数据的存储空间，同时知道数据的表示范围。</p><p>​    <strong>脚本语言中使用变量和函数来完成程序。</strong></p><p>​         <strong>标记语言常用语描述格式化和链接</strong></p><p>​    <strong>脚本语言采用解释方式实现</strong></p><p>​    <strong>编译型语言的执行效率更高。</strong></p><p>​    链表的定义和运算时运用的存储结构：链表中的结点空间需要程序员根据需要申请和释放</p><p>因此，数据空间应采用堆存储分配策略。堆存储可以动态分配大小，适合于链表结构的特点。</p><p>​    <strong>后缀式</strong>（逆波兰式）</p><p><img src="/2018/09/10/程序语言/TIM截图20180915150320.png" alt="TIM截图20180915150320"></p><p>上下文无关文法：形式语言理论中一种重要的变换文法，用来描述上下文无关语言，在乔姆斯基分层中称为2型文法，由于程序设计语言的语法基本都是上下文无关语法，因此应用十分广泛。</p><p>脚本语言：</p><p>​    <img src="/2018/09/10/程序语言/TIM截图20180916190218.png" alt="TIM截图20180916190218"></p><p><img src="/2018/09/10/程序语言/TIM截图20180917170942.png" alt="TIM截图20180917170942"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译原理：&lt;/p&gt;
&lt;p&gt;​    程序错误分为语法错误和语义错误（逻辑错误）&lt;/p&gt;
&lt;p&gt;语法错误是语句形式上的错误，语义错误是含以上的错误（逻辑错误）&lt;/p&gt;
&lt;p&gt;在高级程序设计语言中，语句用于描述程序中的运算步骤，控制结构以及数据传输&lt;/p&gt;
&lt;p&gt; 程序设计语言
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="程序语言" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://yoursite.com/2018/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/10/计算机组成原理/</id>
    <published>2018-09-10T03:01:35.000Z</published>
    <updated>2018-10-02T07:11:06.089Z</updated>
    
    <content type="html"><![CDATA[<p>6分左右</p><ol><li><p>​    <strong>数据的表示</strong>    </p><p>R —— 十进制的转换</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907145356.png" alt="TIM截图20180907145356"></p><p>十进制 —— R进制 使用短除法</p><p>​    </p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907145719.png" alt="TIM截图20180907145719"></p><p>原码反码补码移码</p><p>将一个数转化为二进制，一个字节存储8bit,最高位为符号位 正数的符号位 0 负数的符号位为1</p></li></ol><table><thead><tr><th></th><th>数值1</th><th>数值 -1</th><th>1-1</th></tr></thead><tbody><tr><td>原码</td><td>0000     0001（正数符号位为0）</td><td>1000  0001（对于负数而言，符号位为1）</td><td>1000  0010（-2）</td></tr><tr><td>反码(正数的原码与反码一致)</td><td>0000     0001（正数与原码一致)</td><td>1111    1110 （负数符号位不动，所有的位置按位取反）</td><td>1111   1111（符号位为1，后取反可以得到是0即求得的时  -0）</td></tr><tr><td>补码（正数的原码与补码一致)</td><td>0000  0001（正数的原码与补码一致)</td><td>1111  1111 （符号位不变，反码+1）</td><td>0000   0000（ 即  0）</td></tr><tr><td>移码（一般用于浮点运算的阶码，在补码的基础上，对补码进行取反）</td><td>1000  0001</td><td>0111  1111</td><td>1000  0000（即0）</td></tr></tbody></table><p>数值表示范围</p><table><thead><tr><th></th><th>整数</th></tr></thead><tbody><tr><td></td><td>-（2^n-1   -1）~  2^n-1   -1   (  -127 - 127)</td></tr><tr><td></td><td>-（2^n-1   -1）~  2^n-1   -1    (  -127 - 127)</td></tr><tr><td></td><td>-2^n-1   ~  2^n-1   -1     (-128  - 127 )</td></tr></tbody></table><p>浮点数的表示</p><p>​    N = M * R^e</p><p>M表示尾数， e 为指数 ，R 为基数</p><p>运算过程： 对阶   —— 尾数运算 —— 结果格式化</p><p>2    <strong>计算机结构</strong></p><p>​    三大件：cpu +主存储器 +IO设备</p><p>​    cpu = 运算器 + 控制器</p><p>​    主机 = 主存储器 + cpu</p><p>计算机主存主要是由DRAM(动态随机存取存储器)构成的（SRAM是静态随机存取存储器，EEPROM,电可擦可编程只读存储器）</p><p><strong>运算器</strong>： 算数逻辑单元ALU</p><p>​        累加寄存器AC(通用寄存器，需要运算的一些值)</p><p>​        数据缓冲寄存器DR（当我们对内存进行读写操作时，存储数据）</p><p>​        状态条件寄存器PSW（存储在运算过程中的状态标志位）</p><p><strong>控制器</strong>：程序计数器PC:为了保证程序指令能够连续执行下去，cpu必须具有某些手段来确定下一条指令的地址。。而程序计数器即是，所以通常又被称为指令计数器。在程序开始执行之前，将他的起始地址，即程序的一条指令所在的内存单元地址送入pc，因此程序计数器的内容即是从内存提取的第一条指令的地址。当执行指令时，cpu将自动修改pc的内容，，即当每执行一条指令pc增加一个量，这个量等于指令所含的字节数。以便于保持总是将要执行的下一条指令的地址。由于大多数指令都是按照顺序来执行的，所以修改的过程通常只是简单的pc加1.</p><p>​          指令寄存器IR：用来保存当前正在执行的指令。当执行一条指令时，先将它从内存中取到数据寄存器（DR中，然后在传送给IR,为了执行任何给定的指令，必须对操作码进行测试，以便识别所要求的操作。指令译码器（ID）</p><p>就是做的这项工作，指令寄存器中操作码字段的输出就是指令译码器的输入，操作码经过译码后，即可向操作控制器发出具体操作的特定信号。</p><p>​         指令译码器</p><p>​         时序部件</p><p><strong>构成计算机控制器的硬件主要有指令寄存器IR,程序计数器PC,时序部件和微操作形成部件等。</strong></p><p><strong>而算数逻辑单元ALU不是构成控制器的部件，属于运算器。对于程序状态寄存器PSW属于运算器还是控制器有争议</strong></p><p>​    <strong>地址寄存器（AR）:</strong>用于保存当前cpu所访问的内存单元的地址，由于内存和cp之间存在着操作速度差别，所以必须使用地址寄存器用来保存地址信息，知道内存的读写操作完成。</p><p>计算机基本工作原理：</p><p>​    cpu中的程序计数器pc 用于保存要执行的指令的地址，访问内存时，需要先将内存地址送入存储器地址寄存器MAR中，向内存写入数据时，待写入的数据要先放入数据寄存器MUR。程序中的指令一般放在内存中，要执行时，首先要访问内存取得指令并保存在指令寄存器IR中。</p><p>3   <strong>Flynn 分类法</strong>（对计算机的分类–四大类）</p><p>分类标准： 指令流+数据流</p><p>S  ——  single</p><p>M  —— mulity</p><p>​    </p><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>单指令流单数据流（SISD）</td><td>控制部分：一个    处理器：一个   主存模块：一个</td><td></td><td>单处理器系统</td></tr><tr><td>单指令流多数据流（SIMD）</td><td>控制部分：一个  处理器：多个 主存模块：多个</td><td>各处理器以异步的形式执行同一条指令</td><td>并行处理机阵列处理机超级向量处理机</td></tr><tr><td>多指令流单数据流（MISD）</td><td>控制部分：多个   处理器：一个  主存模块：多个</td><td>被证明不可能，至少是不实际的</td><td>目前没有，有文献称流水线计算机为此类</td></tr><tr><td>多指令流多数据流（MIMD）</td><td>控制部分：多个  处理器：多个  主存模块：多个</td><td>能够实现作业，任务，指令等各级全面并行</td><td>多处理系统    多计算机</td></tr></tbody></table><p> 4  <strong>CISC 和RISC</strong>  （计算机的指令集）</p><p>主要是考察两者的特点</p><p>​    </p><table><thead><tr><th>指令系统类型</th><th>指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC(复杂)</td><td>数量多，使用频率差别大（由于这个指令系统会根据需要设计所需的指令，在这个指令系统中简单的指令和复杂的指令的使用程度不同），可变长格式（即二进制格式）</td><td>支持多种</td><td>微程序控制技术（微码）</td><td>研制周期长</td></tr><tr><td>RISC（精简）</td><td>数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器（寄存器的存取速度快），只有load/store 操作内存</td><td>支持方式少</td><td>增加了通用寄存器，硬布线逻辑控制为主（采用了硬件设备，硬件设备的速度快），适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><p>RISC应该遵循的设计原则：</p><p>​    1 指令条数少，一般为几十条指令</p><p>​    2 寻址方式尽可能的少</p><p>​    3 采用等长指令 不管功能复杂的指令还是简单的指令，均使用同一长度</p><p>​    4 设计尽可能多的通用寄存器</p><p>​    </p><p>5  <strong>流水线技术</strong>（计算）</p><p>​    概念：    流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理时限技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165007.png" alt="TIM截图20180907165007"></p><p>流水线吞吐率计算：单位时间内流水线所完成的任务数量或输出的结果数量。</p><p>流水线的加速比：不使用流水线的时间与使用流水线的时间之比</p><p>系统响应时间和作业吞吐量是衡量计算机系统性能的重要指标。</p><p>对于一个持续处理业务的系统而言  响应时间越短作业吞吐量越大</p><p>系统响应时间是指用户发出完整请求到系统完成任务给出响应的时间间隔。</p><p><strong>作业吞吐量</strong>是指单位时间内系统完成的任务量。若一个给定系统持续地接收到用户提交的任务请求，则系统的响应时间将对作业吞吐量造成一定影响。若每个任务的<strong>响应时间越短，则系统的空闲资源越多</strong>，整个系统在单位时间内完成的任务量将越大；反之，若响应时间越长，则系统的空闲资源越少，整个系统在单位时间内完成的任务量将越小。</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165255.png" alt="TIM截图20180907165421"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165421.png" alt="TIM截图20180907165421"></p><p>​    </p><p>流水线的效率：</p><p>​    流水线的效率指流水线的设备利用率。在时空图上，流水线的效率定义为n个任务占用的时空取与k个流水段总的时空区之比</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907170351.png" alt="TIM截图20180907170351"></p><ol><li><p>​        <strong>存储系统</strong>（概念和计算）**</p><ol><li><p>存储的结构</p></li><li><p>层次化存储结构</p><p>速度快         CPU             寄存器（存在于cpu中运算器和控制器中存在着寄存器，容量小，速度快）</p><p>​            Cache（高速缓存寄存器）                按照内存存取</p><p>​            内存（主存）</p><p>速度慢        外存（辅存）            硬盘  光盘  u盘等</p><p>容量小，速度快的考虑： 基于性价比的考虑</p></li></ol><p>cpu ——内存    </p><ol><li><p>cache：</p><p>工作于内存和cpu 之间，除了寄存器之外，cache 速度最爱</p><p>功能： 提高cpu数据输入输出的速率，突破了冯诺依曼瓶颈，即cpu与存储系统间数据传送带宽限制</p><p>在计算机的存储系统体系中，cache是访问速度最快的层次</p><p>使用cache改善系统性能的依据是程序的局部性原理</p><p>在cpu和主存之间设置高速缓冲存储器Cache 目的是为了提高cpu对主存的访问效率</p><p>（为了提高cpu对主存的存取速度，又不至于增加很大的成本）</p><p>同时设置高速缓冲存储器并不能增加主存的容量。</p><p>cache的 出现因素cpu速度和性能提高很快而主存速度低且价格高，其次是程序执行的局部性特点。将速度快而容量有限的sram构成cache目的在于尽可能发挥cpu的高速度。cache的设计思想是在合理成本下提高命中率。</p><p>​</p></li><li><p>内存<img src="/2018/09/10/计算机组成原理/TIM截图20180907173200.png" alt="TIM截图20180907173200"></p></li></ol><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907173504.png" alt="TIM截图20180907173504"></p><p>局部性原理：</p><p>​    时间局部性</p><p>​    空间局部性</p><p>​    工作集理论：工作集是进程运行时被频繁访问的页面集合</p><p>主存： 分类</p><p>​    随机存取存储器（内存）：DRAM (Dynamic RAM  ,动态RAM)      SRAM   (Static   RAM,静态)-SDRAM</p><p>​    在断电之后，数据不存在</p><p>​    只读存储器:MROM （Mask   ROM,掩护式ROM）   PROM(Programmable  ROM  一次可编程 ROM)    EPROM（Erasable PROM  可擦除的PROM）  闪速存储器（flash   memory,闪存）</p><p>​    在断电之后，数据仍然存在</p><p>磁盘结构与参数：</p><p>​    磁盘运作的原理：</p><p>​    磁盘环型盘片，其上涂有特殊材质的盘片</p><p>​    磁盘使用盘片来保存数据 读取数据为磁头</p><p>​    存取时间 = 寻道时间 + 等待时间（平均定位时间+转动延迟）【取得是平均，最好的情况不需要移动，最坏的情况需要旋转一圈，可以通过它来获取到旋转一圈所需要的时间】</p><p>​    寻道时间指磁头移动到磁道多需要的时间(因为可能是多张磁盘，所以要等待磁头移动到这个磁道，多个同心圆就是磁道)</p><p>​    等待时间为等待读写的扇区转到磁头下方所用时间（内个磁道都分有多个扇区，存取数据都是在扇区内进行的，如果需要数据写入的扇区不在磁头现在所在 的位置那么就要等待磁头移动到所需的扇区）</p></li></ol><p>​    <strong>总线系统</strong>（概念，总线的分类）</p><p>​     根据总线所处的<strong>位置不同</strong>，总线分为：</p><p>​       内部总线 （微机内部的各个外围的芯片与处理器之间的总线）芯片级</p><p>​      系统总线 （数据总线，地址总线  控制总线） 微机中各个插件版与 系统版之间的总线（插件版）</p><p>​            数据总线： 数据的传输（总线的宽度32，一个周期内可以传送的数据为32bit）</p><p>​            地址总线： 32位代表的地址空间2^32(4G)</p><p>​            控制总线：发送响应的控制信号</p><pre><code>外部总线 （微机和外部设备的总线）</code></pre><p>单总线结构中，cpu与主存之间，cpu与io设备之间，io设备与主存之间，各种设备之间都通过系统总线交换信息。单总线结构的优点是控制简单方便，扩充方便，但是由于所有的设备部件都挂在单一总线上，使这种结构只能够分时工作，即同一时刻只能在两个设备之间传送数据，这使系统总线数据传输的效率和速度受到限制是单总线结构的主要缺点。</p><p>cpu与其他部件交换数据时，用数据总线传输数据，数据总线宽度指同时传送的二进制位数，内存容量，指令系统中的指令数量和寄存器的位数与数据总线的宽度无关，数据总线宽度越大，单位时间内能够进出cpu的数据就越多，系统的运算速度越快。</p><p>​ <strong>可靠性</strong>（串联，并联的可靠性以及串并联）</p><p>串联部件的可靠度  = 各部件的可靠度的乘积</p><p>并联部件的可靠度  = 1 -  各部件失效率的乘积</p><p>如果给出的系统由两个部件分别串联 然后冰凉，最好将并联的组成再与一个部件串联</p><p>系统可靠性：容错系统是指在一定程度上具有容错功能的程序，实现容错的主要办法就是冗余</p><p>冗余附加技术的构成主要包括冗余备份程序的存储以及调用，实现错误检测和错误恢复的程序，实现容错软件所需要的固化程序。</p><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908084239.png" alt="TIM截图20180908084239"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180908084807.png" alt="TIM截图20180908084807"></p><p><strong>校验码</strong>（各个校验码的计算）</p><p>​    差错控制  —— CRC 和 海明校验码</p><p>​    检错和纠错</p><p>​    码矩</p><p>​        一个编码系统的码矩是整个编码系统中任意两个码字的最小距离</p><p>​    码矩和检错和纠错的关系</p><p>​    在一个码组中为了检测e个误码，要求最小码矩d 满足   d &gt;= e+1</p><p>​    在一个码组中为了纠正t个误码，要求最小码矩d满足     d &gt;= 2t+1</p><p>循环校验码 CRC (可以用来做检错，但是不能够进行纠错的一种校验码)</p><p>​    原理：<img src="/2018/09/10/计算机组成原理/TIM截图20180908091122.png" alt="TIM截图20180908091122"></p><p>海明校验码</p><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908092254.png" alt="TIM截图20180908092254"></p><p><strong>计算机硬件</strong></p><p>​    </p><table><thead><tr><th>寻址方式</th><th>特点</th></tr></thead><tbody><tr><td>立即寻址方式</td><td>操作数直接在指令中，速度快，灵活性差</td></tr><tr><td>直接寻址方式</td><td>指令中存放的是操作数的地址</td></tr><tr><td>间接寻址方式</td><td>指令总存放了一个地址，这个地址对应的内容时操作数的地址</td></tr><tr><td>寄存器寻址方式</td><td>寄存器存放操作数（速度比立即寻址方式低，比直接寻址方式快寄存器比内存的效率高）</td></tr><tr><td></td><td>寄存器内存存放的时操作数的地址</td></tr></tbody></table><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908174354.png" alt="TIM截图20180908174354"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180910133851.png" alt="TIM截图20180910133851"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180910133909.png" alt="TIM截图20180910133909"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180917170803.png" alt="TIM截图20180917170803"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;6分左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;​    &lt;strong&gt;数据的表示&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;R —— 十进制的转换&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/10/计算机组成原理/TIM截图20180907145356.png&quot; alt
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机组成原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>项目管理</title>
    <link href="http://yoursite.com/2018/09/10/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/10/项目管理/</id>
    <published>2018-09-10T02:59:09.000Z</published>
    <updated>2018-09-18T10:01:18.784Z</updated>
    
    <content type="html"><![CDATA[<p>项目管理工具：</p><p>​     Gantt 图：表现了一个系统开发过程中各个活动的时间安排，也反映了各个活动的持续时间和软件开发的进度，但是不能反映各个活动之间的依赖关系。活动之间依赖关系要用工程网络图（活动图）来表现。<img src="/2018/09/10/项目管理/TIM截图20180907132749.png" alt="TIM截图20180907132749"></p><p>软件开发模型：</p><p>耦合度：</p><p>​    模块的耦合度表现了模块之间相互关联的程度，分为b级</p><p>​    耦合度低 ———————————————————————耦合度高</p><p>​    无直接耦合      数据耦合   标记耦合      控制耦合   公共耦合   内容耦合</p><p>内聚是一种指标，表示一个模块代码功能的集中程度</p><p>​    模块的内聚性表现了模块内部各个子成分功能的集中程度，分为6级</p><p>​    内聚性低————————————————————内聚性高</p><p>​        偶然内聚  逻辑内聚    时间内聚   通信内聚  顺序内聚  功能内聚</p><p>风险管理：</p><p>​    软件开发中的风险与高级管理人员的支持程度有关，与对系统需求理解的程度有噶UN</p><p>与开发资金的及时投入有关，但与最终用户无关，系统的最后部署与运行不属于开发过程。</p><p>Boehm 提出的十大风险：</p><p>​     开发人员短缺</p><p>​    不能实现的进度和预算</p><p>​    开发了错误的软件功能</p><p>​     开发了错误的用户接口</p><p>华而不实的输球</p><p>需求不断的变动</p><p>外部执行的任务不符合要求</p><p>外部提供的组件不符合要求</p><p>实时性不符合要求</p><p>超出了计算机科学发展的水平</p><p>web前端：</p><p>​    MVC   Model  view  controller  是一种架构模式，为那些需要为同样的数据提供多个视图的</p><p>应用程序而设计的，很好的体现了数据层与表现层的分离。</p><p>​    MVC 将应用程序分为三种对象模型</p><p>​    模型：应用问题域中包含的抽象领域知识</p><p>​    视图：将应用问题域中包含的抽象领域知识呈现给用户的方法，一个模型可以用于多个视图</p><p>​    控制器： 用户界面对用户输入的响应方式</p><p>软件测试：</p><p>​    测试人员在系统设计阶段介入，根据概要设计说明书开始制定测试计划：</p><p>测试过程要求用户参与，特别是提交阶段要求通过用户的验收测试，设计测试用例时不但要选择合理的输入数据作为测试用例，还要选择不合理的输入数据作为测试用例。</p><p>软件评审：    </p><p>​    软件评审是评审软件产品，不要涉及对软件生产者能力的评价</p><p>评审前要指定严格的评审计划，并严格遵守预计的日程安排</p><p>对评审中出现的问题要记录在案，不要过多地讨论解决方案，把问题留给软件生产者来解决</p><p>要限制参与者人数，并要求参加评审的人员在评审会之前仔细阅读文档，做好充分的准备。</p><p>软件的质量度量指标：</p><p>​     软件的正确性是指软件完成所需功能的程度，尽管这种程度与每千行代码的故障数有关，但不完全等同。</p><p>​    软件的完整性是指软件在安全方面抗攻击的能力。</p><p>​    软件可用性用来度量软件的 用户友好性</p><p>​    可用性测量：</p><p>​      学会操作软件所需体力智力</p><p>​    对系统的使用达到中等效率所需要的时间</p><p>​    当系统有一个中等效率的人使用时测量到的生产率增长值</p><p>​    用户对系统的主观评价</p><p>成本管理</p><p>各种开发成本估算模型通常采用经验公司，提供一个或者多个数学算法，将成本作为若干个变量的函数计算求得。</p><p>常用的估算模型；</p><table><thead><tr><th>开发模型</th><th>类型分类</th><th>内容</th></tr></thead><tbody><tr><td>IBM模型</td><td>静态单变量模型</td><td>利用已估算的特性（源代码函数）来估算各种资源的需求量</td></tr><tr><td>Putnam</td><td>动态多变量模型</td><td>它嘉定软件项目工作量的分布和Rayleigh曲线类似，并把项目的资源需求当做时间的函数。改模型为描述开发工作量和计划进度之间的关系定义了两个方程：1，软件方程，表明开发工作量和项目规模的三次幂成正比，与开发时间的四次方成反比 2 人力增加方程，表明工作量和开发时间三次幂成正比， Putnam模型一般应用于超过了20000 行代码行的项目</td></tr><tr><td>COCOMO</td><td></td><td>一种精确且易于适用的成本估算模型，它是由基本COCOMO模型，中级COCOMO模型和高级COCOMO模型组成的集合。基于COCOMO模型是静态单变量模型，用一个已经估算的源代码行数为自变量的经验函数来计算软件开发工作量和开发成本。中级COCOMO模型在基本模型在基本基本模型中已计算的软件开发工作量的基础上，在用涉及产品，硬件，人员，项目和项目的15个成本驱动因素来调整工作量的估算。高级COCOMO模型不但包括了中级COCOMO模型的所有特性，而且为上述15个因素在软件生存周期的不同阶段赋予了不同的权重。COCOMO模型是由Boehm 于1981年首次发表，后来又和同事定义了更加复杂的<strong>COCOMO II 模型</strong>，该模型反映了软件工程技术的近期变化，COCOMO模型非常适用于专用的，按照技术说明制作的软件项目。而COCOMO  II 更加实用与广泛汇集各种技术的软件项目，为商用软件，面向对象软件，通过螺旋型或进化型等开发模型制作的软件。</td></tr></tbody></table><p><img src="/2018/09/10/项目管理/TIM截图20180915171656.png" alt="TIM截图20180915171656"></p><p>CVS  Concurrent  Version  System  是一个免费的协同版本控制工具，主要用于软件源码的维护。此外CVS可以维护任意文档的开发和使用，如共享文件的编辑修改，而不仅仅局限于程序设计。cvs维护的文件类型可以是文本类型也可以是二进制类型。cvs基于客户端/服务器模式，多个用户可以网络的方式进行同时访问，从而使得cvs成为位于不同地点的人同时处理数据文件 特别是程序的源代码时的首选。</p><p>软件容错率的提高，有利于软件可靠性的提高</p><p>软件可靠性是指软件按照用户的要求和设计的目标，执行其功能的正确程度，所以一个可靠的软件应当是正确的完整的， 一致的和健壮的。 通常软件可靠性收到其他质量特性的影响。</p><p>软件开发工作量和成本估算：一般是通过计算LOC （源代码行数）和功能点数（FP）完成的。</p><p>功能点数与源代码函数是可以相互转换的。</p><p>如果没有历史数据可以使用，或者新的项目与之前做过的项目差别很大，那么可以使用一个成熟的估算模型，如IBM模型 COCOMO 模型或 Putnam 方法论将软件项目规模 转换成工作量</p><p>​    以IBM 为例  ，1977年提出的估算公式：</p><p>​    E = 5.2xL0.91  L  是源代码函数（LOC） E是工作量（PM计）</p><p>​    D = 4.1x L 0.36   D 是项目持续时间（按照月进行计算）</p><p>​    S = 0.54xE0.6    S 是人员需要量（按照人计算）</p><p>​    DOC  = 49xL1.01   Doc 是文档数量（按照页计算）</p><p><img src="/2018/09/10/项目管理/TIM截图20180914154439.png" alt="TIM截图20180914154439"></p><p>时间管理（计算）</p><p>风险管理</p><p>进度安排的常用图形有Gantt图和PERT图</p><p>Gantt图不能够清晰描述各任务之间的依赖关系</p><p>PERT图可以给出哪些任务完成后才能够开始另一些任务</p><p><img src="/2018/09/10/项目管理/TIM截图20180914155816.png" alt="TIM截图20180914155816"></p><p><img src="/2018/09/10/项目管理/TIM截图20180918175958.png" alt="TIM截图20180918175958"></p><p><img src="/2018/09/10/项目管理/TIM截图20180918180024.png" alt="TIM截图20180918180024"></p><p><img src="/2018/09/10/项目管理/TIM截图20180914160020.png" alt="TIM截图20180914160020"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目管理工具：&lt;/p&gt;
&lt;p&gt;​     Gantt 图：表现了一个系统开发过程中各个活动的时间安排，也反映了各个活动的持续时间和软件开发的进度，但是不能反映各个活动之间的依赖关系。活动之间依赖关系要用工程网络图（活动图）来表现。&lt;img src=&quot;/2018/09/10/
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="项目管理_系统可靠性分析" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86-%E7%B3%BB%E7%BB%9F%E5%8F%AF%E9%9D%A0%E6%80%A7%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2018/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/09/10/计算机网络/</id>
    <published>2018-09-10T02:49:48.000Z</published>
    <updated>2018-09-18T13:32:56.083Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>层次</th><th>名称</th><th>主要功能</th><th>主要设备及协议</th></tr></thead><tbody><tr><td>1</td><td>物理层</td><td>进行二进制的传输（高电平低电平的传输）</td><td><strong>中继器</strong>（为了信号的传输不衰竭，每隔一段距离设置一个中继器） <strong>集线器</strong>（多端口的中继器）</td></tr><tr><td>2</td><td>数据链路层</td><td>传送以帧为单位的信息（信息单位，方便传输时的识别）</td><td><strong>网桥</strong>（连接两个同类型网络的设备） <strong>交换机</strong>  （多端口的网桥  连接多个设备）<strong>网卡</strong>  PPTP,L2TP,SLIP,PPP</td></tr><tr><td>3</td><td>网络层</td><td>分组传输和路由选择</td><td><strong>三层交换机</strong> <strong>路由器</strong> ARP （ip 转Mark    ）,RARP（Mark转ip）， IP， ICMP（因特网的控制协议 ，如 ping 命令） IGMP</td></tr><tr><td>4</td><td>传输层</td><td>端与端的连接（端口号）</td><td>TCP （可靠的，在通信时建立连接）,UDP（不可靠的，在通信时不建立连接）</td></tr><tr><td>5</td><td>会话层</td><td>建立，管理和终止会话</td><td>P0P3,SMTP（邮件传输协议）FTP,（文件传输协议）HTTP（超文本传输协议，用来传输网页）,Telnet,（远程登录）(前 基于tcp 协议),DHCP,（局域网，用来做动态的ip分配）TFTP,（小文件传输协议）SNMP,（简单网络管理协议）DNS(域名解析)</td></tr><tr><td>6</td><td>表示层</td><td>数据的格式与表达 ，加密，压缩</td><td></td></tr><tr><td>7</td><td>应用层</td><td>实现具体的应用功能</td></tr></tbody></table><p>局域网只存在于 物理层和 数据链路层</p><p>​    最典型的的代表是  交换机</p><p>当网络无法访问外部站点时，<strong>采用ping操作</strong>只能够判断用户与外部站点的连通性，无法判断故障处于校园网内还是校外，而<strong>使用netstat</strong>  用于显示与IP TCP  UIIP  和 ICMP 协议有关的统计数据，一般用于检验本机各个端口的网络连接情况，<strong>使用ARP</strong>  可以查看和修改本地计算机上的ARP 表项。ARP 命令对于查看ARP缓存和解决地址解析问题很有用，而使用tracert可以跟踪网络连接，<strong>Tracert(跟踪路由）是路由跟踪使用程序</strong>，<strong>用于确定IP数据报访问目标所采取的路径</strong>。通过该命令可以查看在哪段路由出现联通问题。</p><p> 网络技术标准和协议</p><p>​    <img src="/2018/09/10/计算机网络/网络规划与设计.png" alt="网络规划与设计"></p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>TCP/IP协议</td><td>internet，可扩展，可靠，应用最广，牺牲速度和效率</td></tr><tr><td>IPX/SPX协议</td><td>NOVELL，路由，大型企业网</td></tr><tr><td>NETBEUI  协议</td><td>IBM ,非路由，快速</td></tr></tbody></table><p><img src="/2018/09/10/计算机网络/TIM截图20180905135958.png" alt="TIM截图20180905135958"></p><p>SNMP:简单网络管理协议，使用UDP协议进行封装。</p><p>25端口是SMTP(Simple Mail Transfer Protocol) 简单邮件传输协议，服务器开放，主要用于发送邮件。</p><p>DHCP协议：局域网中有DHCP服务器，<strong>用来动态的分配ip地址</strong>（Dynamic Host Configurationi Protocol 动态主机配器协议）</p><ol><li><p>客户机  向DHCp服务器中请求 ip地址</p></li><li><p>是一种客户机/服务器模型</p></li><li><p>租约默认为八天</p></li><li><p>当租约过半时客户机会向 DHCP服务器申请续约</p></li><li><p>当租约超过87.5%，如果还未和当初提供ip的服务器联系上，就会开始联系其他的DHCP服务器</p></li><li><p>固定分配，动态分配 自动分配</p></li><li><p>169.254.x.x 和0.0.0.0 是初始的，未分配的ip 地址</p><p>当DHCP客户机首次启动时，客户机向DHCP服务器发送一个DHCgdiscover数据包，该数据包表达了客户机的ip租用请示2，在大多数情况下，客户机接受收到的第一个dhcpoffero 使用dhcp入伍时，可以通过保留ip与MAC地址保证某台计算机使用固定企地址。客户端在配置时不必指明dhcp服务器ip地址，就能获得dhcp服务。在默认情况下，客户机采用最先到达的dhcp服务器分配的ip地址。</p></li></ol><p>DNS服务器 ：域名服务器</p><ol><li><ul><li><p>通过域名访问站点,而识别计算机的是ip地址，将域名转换成ip地址</p></li><li><p>dns 所做的就是这样的工作</p></li><li><p>两种基本的查询域名方式</p><ol><li><p>递归查询：服务器必要回答目标ip与域名之间的映射关系</p></li><li><p>迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标ip 与域名之间的映射关系，也可以是其他dns服务器的地址</p><p><strong>主机向本地域名服务器的查询是递归查询</strong></p><p><strong>本地域名服务器向根域名服务器的查询通常采用迭代查询</strong></p><p>计算机网络的分类： 拓扑结构</p><p>按照分布范围分为  局域网 （LAN） 城域网 (MAN)   广域网 (WAN)  因特网</p><p>按照拓扑结构分为： 总线型( 一条线上连接各个终端)   星型（缺点：单点故障，办公室中的局域网，中心是交换机）   环型（信息通过环型进行传送）</p></li><li><p>分层设计：</p><ol><li>接入层：向本地网段提供用户接入</li><li>汇聚层：网络访问策略控制，数据包处理，过滤，寻址</li><li>核心层：数据交换</li></ol></li><li><p>ip地址 （ipv4）</p><p>ABC（普通） D(组播)  E（保留）</p><p>A类地址： 包含主机数量2^24 -2  在四段的中 ，首个bit位是网络号</p><p>2 为： 全为0 （代表网络地址） 和 全为1 （网络中的（广播）地址）的地址</p><p>且只有前8位 表示地址空间    总共是0-127个  还包含特殊地址</p><p>B类地址：包含主机数量2^16-2  前两段为网络地址，后为主机地址</p><p>c类地址：包含主机数量2^8-2  即254台主机   ，前三段为网络地址</p><p><img src="/2018/09/10/计算机网络/TIM截图20180910145402.png" alt="TIM截图20180910145402"></p></li><li><p>子网划分</p><ol><li><p>子网掩码</p><ol><li>将一个网络划分成多个子网（取部分主机号当子网号）</li><li>将多个网络合并成一个大的网络（取部分网络号当主机号）</li></ol></li><li><p>无分类编址（无类域间路由）</p><ol><li>ip地址  =  网络前缀 主机号</li></ol></li><li><p>特殊含义的ip地址</p><p>| IP             | 说明                          |<br>| ————– | ————————— |<br>| 127网段          | 回播地址                        |<br>| 网络号全0地址        | 当前子网中的主机                    |<br>| 全1地址           | 本地子网的广播                     |<br>| 主机号全1地址        | 特定子网的广播                     |<br>| 10.0.0.0/8     | 10.0.0.1到10.255.255.254     |<br>| 172.16.0.0/12  | 172.16.0.1到172.31.255.254   |<br>| 192.168.0.0/16 | 192.168.0.1到192.168.255.254 |<br>| 169.254.0.0    | 保留地址，用于DHCP失效（Win）          |<br>| 0.0.0.0        | 保留地址，用于DHCPshixiao(Linux)   |</p></li></ol></li><li><p>无线网</p><ol><li>无线网的优势：<ol><li>移动性</li><li>灵活性</li><li>成本低</li><li>容易扩充</li></ol></li><li>无线网分类：<ol><li>无线局域网 wlan  802.11  wi-fi</li><li>无线城域网  wman    802.16  WiMax</li><li>无线广域网   wwan   3G/4G</li><li>无线个人网（wpan  802.15 Bluetooth)</li></ol></li><li>网络接入技术<ol><li>有线接入</li><li>无线接入</li><li>3G/4G</li></ol></li></ol><p><img src="/2018/09/10/计算机网络/网络接入技术.png" alt="网络接入技术"></p></li></ol></li></ul></li></ol><p>对称（）非对称指的是 上传与下载的线路带宽，给予上传的少下载的多</p><p>ADSL是一种宽带接入技术，宽带两方面一它提供的带宽比较高，下载速率可以达到8Mb/s甚至更高，上传效率也可以达到640kb/s到1Mb/s 其次是它采用频分多路技术在普通电话线划分出上行下行和语音等不同的信道，从而实现上网和通话同时传输。</p><p>安全认证介绍：1 ppp（point to point protocol） 的NCP可以承载多种协议的三层数据包 2 ppp使用LCP控制多种链路的参数（建立，认证，压缩，回拨）</p><p>ppp的认证类型：1 ppp的pap认证是通过二次握手建立认证（明文不加密） 2 ppp的chap挑战握手认证协议，通过三次握手建立认证（密文采用MD5加密）3 ppp的双向验证，采用chap的主验证风格  4 ppp的加固验证，采用的是两种（pap，chap）验证同时使用   </p><p>ppp是点对点协议，在TCP-IP协议集中它是一种用来同时调制连接的数据链路层协议（OSI模式中的第二层）替代了原来非标准的第二层协议，用到的安全协议CHAP</p><p>WCDMA 是使用国家和地区最多的，标准完整且成熟 稳定的</p><p>CDMA2000 和  TD-SCDMA  （CDMA2000 电信使用较多  TD 移动推动过）</p><p>CDMA: (Code  Division Multiple  Accesst CDMA) 码分多址技术比较适合现代移动通信网的大容量，高质量，综合业务，软切换等要求。</p><p>CDMA  似乎在数字技术的分支– 扩频通信技术上发展起来的一种崭新而成熟的无线通信技术，CDMA技术的原理是基于扩频技术，即需传送的具有一定信号带库信息数据，用一个带宽大于信号带宽的高速伪随机码进行调制，是原数据洗好的带宽被扩展，再径载波调制并发送出去。接收端使用完全相同的伪随机码，与接收的带宽信号作相关处理，把宽带信号换成原信息数据的窄带信号即解扩，以实现信息通信。</p><p>CDMA是国内的主要移动通信技术。</p><p><strong>该标准是由中国大陆独自制定的3G标准 TD-SCDMA</strong></p><p>网络安全</p><p>​    防火墙技术，访问控制技术和入侵检测技术都属于网络安全控制技术</p><p>差错控制技术是一种用来保证数据传输质量的技术，不属于网络安全控制技术。</p><p>冲击波 病毒是一种弄蠕虫类型的病毒，在进行网络传播时，利用了windows 操作系统的RPC漏洞。</p><p>TCP/IP体系结构中，ARP协议数据单元封装在以太网的数据帧中传送，实现IP地址到MAC地址的转换。</p><p>IEEE 802.11标准定义的分布式协调功能采用了载波监听多路访问肿突避免（CSMA/CA协议）。在无线网中进行冲突检测时有困难的。如，连个站由于距离过大或中间障碍物的分隔而检测不到冲突，但是位于她们之间的第三个站可能会检测到冲突，这就是所谓的隐蔽终端问题。采用冲突避免的办法可以解决隐蔽终端的问题。802.11定义了一个帧间隔（Inter Frame  Spacing  IFS）时间。另外还有一个后退计数器，其初始值是由随机数发生器设置的，递减记数直到0.</p><p>基本操作：</p><p>​     1 如果一个站有数据要发送并且监听到信道忙，则产生一个随机数设置自己的后退计数器并坚持监听</p><p>​    2 坚挺到信道空闲后等待一个IFS时间，然后开始计数，最先计数完的栈可以开始发送</p><pre><code>3  其他站在监听到可以采用载波检测方法发现信道空闲，也可以采用能量检测方法发现信道空闲。这个算法对参与竞争的站是公平的，基本上按照先来先服务的顺序获取到发送的机会。</code></pre><p>ping 命令是windos自带的一个可执行命令，用于验证与远程计算机的连接。该命令只有在安装了tcp/ip协议之后才可以使用。ping命令的主要作用是通过发送数据包并接收应答信息来检测两台计算机之间的网络是否连通。当网络出现故障的时候，可以用这个命令来预测故障和确定故障地点。ping命令成功只是 说明当前主机与目的主机之间存在一条连通的路径。如果不成功，则考虑网线是否连通，网卡设置是否正确，ip地址是否可用等。利用它可以检查网络是否能够连通。ping ip地址，该命令还可以加入参数使用。</p><p>4G 时代：  LTE 分为   </p><p>​    十分  ：TDD    由 TD-SCDMA 演化</p><p>​    平分： FDD 由  WCDMA 演化</p><p>IPV6:  是设计用于替代现行版本IP协议（IPV4) 的下一代ip协议</p><ol><li><p>IPv6 地址长度为128 位  地址空间增大了2^96 倍</p></li><li><p>灵活的ip 报文头部格式，使用了一系列固定格式的扩展头部取代了ipv4  中可变长度的选项字段，ipv6 中选项部分的出现方式也有所变化，使路由器可以简单路过选项，而不做任何处理，加快了豹纹的处理速度</p></li><li><p>ipv6 简化了报文头部个事，字段只有8个，加快报文转发，提高了吞吐量</p></li><li><p>提高了安全性，身份认证 和隐私权是ipv6 的关键特性</p></li><li><p>支持更多的服务类型</p></li><li><p>允许协议继续演变，增加新的功能，使之适应未来技术的发展</p><p>单播地址：用于单个接口的标识符</p><p>任播地址：泛播地址，一组接口的标识符，ipv4 广播地址</p><p>组播地址，ipv6中的组播在功能上与ipv4 中的组播类似</p><p>网络安全：</p><p>​多个网络设备上的程序在短时间内同时向某个服务器产生大量的请求，导致该服务器不堪重负。典型的分布式拒绝服务攻击（DDos）</p></li></ol><p>多模光纤：</p><p>​    成本低，宽芯线，聚光好，耗散大，低效，用于低速度，短距离的通信</p><p>单模光纤：</p><p>​     成本高，窄芯线，需要激光源，耗散小，高校，用于高速度，长距离的通信</p><p><strong>网络攻击</strong>: 以网络为手段窃取网络上其他计算机的资源或特权，对其完全性和可用性进行破坏的行为。网络攻击又分为主动攻击和被动攻击。被动攻击就是网络窃听，截取数据包进行Fenix，从中窃取重要的敏感信息。被动攻击很难发现，因此预防很重要。防止被动攻击的主要手段是  数据加密传输。 为了保护网络资源免于威胁和攻击，在密码学和安全协议的基础上发展了网络安全体系中的5类安全服务：身份认证，访问控制，数据保密，数据完整性和不可否认。对这5类安全服务，国际标准化组织ISO已经有明确的定义。主动攻击包括：窃取，篡改，假冒和破坏。字典式口令猜测，IP地址欺骗和服务拒绝攻击等都属于主动攻击。一个好的身份认证系统包括数据加密，数据完整性检验，数据签名和访问控制等安全机制，可以用于防范主动攻击，但要是想要杜绝主动攻击很困难，因此对付主动攻击的另一个措施是及时发现并及时恢复所造成的破坏。</p><p>​    常用的9中网络攻击方法：</p><p>​    获取口令        放置特洛伊木马程序    WWW的欺骗术    电子邮件攻击    </p><p>​    通过一个节点来攻击其他节点        网络监听    寻找系统漏洞        利用账号进行攻击</p><p>​    偷取特权 </p><p>计算机病毒：</p><p>​    多行病毒是一种较为高级的病毒，这种病毒在每次感染后会改变自己</p><p>​    熊猫烧香是一种感染型蠕虫病毒，它能感染系统中exe,~,pif .src  html 和asp等文件，还能够中止大量的反病毒软件进程并且会删除扩展名为gho的文件，该文件是——系统备份工具GHOST的备份文件，使用户的系统备份文件丢失。</p><p>​    被感染的用户系统中所有.exe 可执行文件全被被改成熊猫举着三炷香的模样。</p><p>（执行文件图标编程熊猫烧香，用户信息被泄露，系统运行变慢）</p><p>ARP协议的作用是由目标的ip地址发现对应的mac地址，如果源站要和一个新的目标通信，首先又源站发出arp请求广播包。其中包含目标的ip地址，然后目标返回arp应答包，其中包含了自己的mac地址，此时源站一方面把mac地址装入要发送的数据帧汇总，一方面将得到的mac地址添加到自己arp表中，当一个栈与多个目标进行通信后，在其arp表中就积累了多个表项，每一项都是ip地址与mac地址的映射关系。arp表通常用于ip值查找对应的mac地址。</p><p><img src="/2018/09/10/计算机网络/TIM截图20180915103111.png" alt="TIM截图20180915103111"></p><p>动态路由选择算法就是自适应路由选择算法，是依靠当前网络的状态信息进行决策，从而使路由选择结果在一定程度上适应网络拓扑结构和通信量变化，需要依据网络经常更新路由。</p><p>AScall是美国信息互换标准代码，是一种基于拉丁字母的一套电脑编码系统。smtp 传输的邮件报文就是采用的这种编码</p><p>zip是一种计算机文件的压缩算法，能减少文件的大小，有利于数据存储和传输</p><p>PNP是一种即插即用技术，是系统自动侦测周边设备和板卡并自动安装设备驱动程序，做到插上就能够使用，无需人工干预</p><p>Html 超文本标记语言，用于描述网页文档的一种标记语言</p><p>VPN(virtual private network)  虚拟专用网络</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层次&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;主要功能&lt;/th&gt;
&lt;th&gt;主要设备及协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;进行二进制的传输
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://yoursite.com/2018/09/10/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/09/10/软件工程/</id>
    <published>2018-09-10T02:48:33.000Z</published>
    <updated>2018-10-07T02:53:54.574Z</updated>
    
    <content type="html"><![CDATA[<ol><li><ol><li><p>软件文档</p><ol><li>| 按照引发维护的原因分类 | 内容                                       |<br>| ———– | —————————————- |<br>| 改正性维护       | 指改正系统已经发生，但测试中未发现的错误。这种维护量大约占整个维护量的20%左右 |<br>| 适应性维护       | 指为使软件适应信息技术变化，软硬件环境和管理需求等变化而修改软件，约占整个维护量的25%左右 |<br>| 完整性维护       | 指为扩充软件功能，改进加工效率，改善系统性能而修改软件，这种维护对系统质量的影响比较大，约占整个维护工作量的50%左右 |<br>| 预防性维护       | 为了提高软件的可维护性和可靠性，并适应未来的软硬件环境变化而对软件或软件中的一部分重新设计，这种维护约占整个维护量的5%左右 |</li></ol></li></ol></li><li><p>软件测试：</p><ol><li>软件测试是指在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程</li><li>测试基础：测试用例是由测试数据和预期结果构成。<ol><li>为了发现程序中的错误，应该竭力设计能够暴露错误的测试用例</li><li>好的测试用例是发现至今为止尚未发现的错误</li><li>一次成功的测试是发现了至今尚未发现的错误的用例</li></ol></li><li>测试准则<ol><li>应该尽早的不断的进行测试，软件测试贯穿于开发过程的始终</li><li>所有的测试都应该能够追溯到用户需求</li><li>应该从小规模测试开始，并逐步进行大规模测试</li><li>应该远在测试开始之前就制定出测试计划</li><li>80% 的错误可能出现在20%的程序模块中</li><li>应该由独立的第三方从事测试工作</li><li>​ 对于非法和非预期的输入数据也要像合法数据一样编写测试用例</li><li>​ 检查软件是否做了应该做的事仅仅是成功的一半，另一半是看软件是否做了不该做的事。</li><li>​ 在规划测试时不要设想程序中不会查出错误。</li><li>​ 测试只能证明软件中有错误，不能够证明软件中没有错误。</li><li>修改后应该进行回归测试</li><li>尚未发现的错误数量应该与该程序已经发现错误数成正比。</li></ol></li><li>软件测试分类：<ol><li>测试阶段：单元测试，组装测试，确认测试，系统测试四个阶段。</li><li>测试方法： 白盒。黑盒</li></ol></li></ol></li></ol><ol><li><p><img src="/2018/09/10/软件工程/TIM截图20180913112834.png" alt="TIM截图20180913112834"></p></li><li><p>| 测试   | 内容                                       | 阶段                                       | 测试方法  | 测试内容                                     |<br>| —- | —————————————- | —————————————- | —– | —————————————- |<br>| 单元测试 | 通常在模块的开发期间实施，主要测试程序中的一个模块或一个子程序。         | 详细设计阶段                                   | 白盒测试  | 接口测试，局部数据结构测试，独立路径测试，边界条件测试，错误处理测试，功能测试，性能测试，内存使用测试。其中全局变量存在于全局数据结构中，<strong>单元测试主要测试局部数据结构测试。</strong> |<br>| 集成测试 | 通常需要将所有程序模块按照设计要求组装成系统，这种测试的目的是在保证各模块仍能够正常运行的同时，组装后的系统也能达到预期功能。 | 概要设计阶段（概要设计： 也称为结构设计或者总体设计。概要设计的基本任务，设计软件系统结构，进行模块划分，确定每个模块的功能，接口，模块间的调用关系。概要设计工具：结构图，数据字典（DD）,判定树和判定表。） | 黑盒测试  | 组装形式一次性组装  增量式组装（两个拼接测试，三个拼接测试，缺：工作量大）可以编写一些配合模块来配合 |<br>| 确认测试 | 任务是进一步检查软件的功能和性能是否与用户要求一致。               | 需求分析阶段                                   | 黑盒测试法 | <strong>Alpha 测试</strong>是用户在开发者的场所下进行的测试，并在开发者的指导下进行，开发者记录在测试中出现的问题和错误，是在开发者可以控制的情况下进行的<strong>Beta测试</strong>是软件的最终用户在一个或者多个用户场所进行的，它是在开发者不能控制的环境中的真实应用，用户记录关于测试中出现的问题，开发者得到反馈后，进行修改并发布最终的软件产品） |<br>| 系统测试 | 把已经确认的软件在实际运行环境汇总，与其他系统成分组合在一起进行测试。目的是验证系统是否满足了需求规格的定义，找出需求规格不符或矛盾的地方，从而提出更加完善的方案 | 需求分析阶段                                   |       | 功能测试，性能测试，健壮性测试，用户界面测试，安全性测试，安装与反安装测试。偏重于压力，可靠性   性能，【负载（不同的负载下，性能表现 如并发300，并发500下） 强度（资源不是正常配置下是否能够正常应对）压力测试（在极限值的情况下性能表现））】测试的目标是从需求分析开始，从需求开始时就已经确定了产品的功能，用户场景和用户使用的功能。 |<br>| 回归测试 | 指修改了旧的代码之后，重新进行全部的或部分以前的测试用例，以确定修改没有引入新的错误或导致其他代码产生错误。 |                                          |       |                                          |<br>| 验收测试 | 用户参与，是否愿意接受产品  ，验收：软甲正确的实现了某个特定要求的一系列活动  |                                          |       |                                          |</p></li><li><p>| 测试类型            | 测试方法                      | 内容                                       |<br>| ————— | ————————- | —————————————- |<br>| 动态测试（使用计算机进行测试） | 黑盒测试法（不知道结构，测试功能,知道输入和输出） | 等价类划分（将类别进行划分，每个类中抽取一个进行测试，如成绩等级），边界值分析（90及90分以上 ，在两种等价类的边界上，进行测试时取两个端点值和略大于端点值，以及略小于端点值的值），错误推测，因果图 |<br>|                 | 白盒测试法（知道结构）               | <img src="/2018/09/10/软件工程/TIM截图20181002174134.png" alt="TIM截图20181002174134"> |<br>|                 | 灰盒测试法                     | <img src="/2018/09/10/软件工程/TIM截图20181002174727.png" alt="TIM截图20181002174727"> |<br>| 静态测试（手工测试）      | 桌前检查                      | 自己浏览检查代码                                 |<br>|                 | 代码走查                      | 运行代码检查                                   |<br>|                 | 代码审核                      | 交叉检查代码                                   |</p></li></ol><p>5<strong>.设计评审</strong>：对软件需求分析阶段和概要设计阶段产生的软件设计说明书进行质量方面的评审。此时软件还没有实体</p><ol><li>​    代码审查以人工的模拟技术和一些类似于动态分析的方法对程序进行分析和测试，通常在单元测试阶段进行；</li><li>​    结构测试则是在了解程序结构的前提下在单元/模块测试中进行</li><li>​    可靠性测试主要检查软件的平均失效间隔时间等指标是否符合系统需求</li></ol><p>6.<strong>软件维护</strong>： 可理解性，可测试性，可修改性（具体包括理解，改正，改动，改进软件的难易程度）</p><ol><li><p>影响维护工作量的因素：系统大小，程序设计语言，系统年龄，数据库技术的应用，先进的软件开发技术</p></li><li><p>| 按照引发维护的原因分类 | 内容                                       |<br>| ———– | —————————————- |<br>| 改正性维护       | 指改正系统已经发生，但测试中未发现的错误。这种维护量大约占整个维护量的20%左右 |<br>| 适应性维护       | 指为使软件适应信息技术变化，软硬件环境和管理需求等变化而修改软件，约占整个维护量的25%左右 |<br>| 完整性维护       | 指为扩充软件功能，改进加工效率，改善系统性能而修改软件，这种维护对系统质量的影响比较大，约占整个维护工作量的50%左右 |<br>| 预防性维护       | 为了提高软件的可维护性和可靠性，并适应未来的软硬件环境变化而对软件或软件中的一部分重新设计，这种维护约占整个维护量的5%左右软件质量：用户需求是度量软件质量的基础 2  指定的标准定义了一组指导软件开发的准则  3没有显式描述的隐含需求（期望软件是容易维护的） |</p></li><li><p>软件质量是 软件和明确的和隐含的定义的需求相一致的程度。</p></li><li><p>ISO/IEC  9126 软件质量模型中第一层定义了六个质量特性，并为各质量特性定义了相应的质量子特性。</p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20181002180228.png" alt="TIM截图20181002180228"></p></li><li><p>| 质量特性                                     | 质量子特性    | 内容                                    |<br>| —————————————- | ——– | ————————————- |<br>| 功能性                                      | 适合性      | 与规定任务能否提供一组功能以及这组功能的适合程度有关的软件属性       |<br>| （与功能及其指定的性质有关的一组属性）                      | 准确性      | 与能否得到正确或相符的结果或效果有关的软件属性               |<br>|                                          | 互操作性     | 与其他指定系统进行交互的能力有关的软件属性                 |<br>|                                          | 保密安全性    | 与防止对程序及数据的非授权的故意或意外访问的能力有关的软件属性       |<br>|                                          | 依从性      | 使软件遵循有关的标准，约定，法规以及类似规定的软件属性           |<br>| 可靠性                                      | 成熟性      | 与由软件故障引起失效的频度有关的软件属性                  |<br>| （在规定的时间和条件下，软件维持其性能水平的能力有关的一组属性）         | 容错性      | 与由软件故障或违反指定接口的情况下，维持规定的性能水平的能力有关的软件属性 |<br>|                                          | 易恢复性     |                                       |<br>|                                          | 依从性      |                                       |<br>| 易用性                                      | 易理解性     | 与用户为认识逻辑概念及其应用范围所花的努力有关的软件属性          |<br>| （与一组规定或潜在的用户为使用软件所需作的努力和对使用所作的评价有关的一组属性） | 易学习性     | 与用户为学习软件应用所花的努力有关的软件属性                |<br>|                                          | 易操作性     | 与用户为操作和运行控制所花的努力有关的软件属性               |<br>|                                          | 吸引性      |                                       |<br>|                                          | 依从性      |                                       |<br>| 效率                                       | 时间特性     | 响应和处理时间以及吞吐量有关的软件属性                   |<br>| （与在规定的条件时间特性与软件执行其功能时，软件的性能水平与所用资源量之间关系有关的一组属性） | 资源利用性    | 使用的资源数量及其使用资源的持续时间有关的软件属性             |<br>|                                          | 依从性      |                                       |<br>| 维护性                                      | 易分析性     | 与为诊断缺陷或失效原因及为判定待修改的部分所需努力有关的软件属性      |<br>| （与软件维护的难易程度有关的一组属性）                      | 易改变性     | 与进行修改，排除错误或适应环境变化所需努力有关的软件属性          |<br>|                                          | 稳定性      | 与修改所造成的未预料结果的风险有关的软件属性                |<br>|                                          | 易测试性     | 与确认已修改软件所需的努力有关的软件属性                  |<br>|                                          | 依从性      |                                       |<br>| 可移植性                                     | 适应性      | 与软件无需采用特殊处理就能适应不同的规定环境有关的软件属性         |<br>| （与软件可从某一环境转移到另一环境的能力有关的一组属性）             | 易安装性     | 在指定换将下安装软件的难易程度                       |<br>|                                          | 共存性（一致性） | 软件服从于可移植性有关的标准或约定的程度                  |<br>|                                          | 易替换性     | 软件在特定软件环境中用来替换指定的其他软件的可能性和难易程度        |<br>|                                          | 依从性      |                                       |</p><p><strong>软件质量保证</strong>：</p></li><li><p>​    <img src="/2018/09/10/软件工程/TIM截图20181003120046.png" alt="TIM截图20181003120046"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20181003115747.png" alt="TIM截图20181003115747"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20181003120141.png" alt="TIM截图20181003120141"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20181003120242.png" alt="TIM截图20181003120242"></p></li><li><p><strong>软件项目风险</strong>是指在软件开发过程中遇到的预算和进度等方面的问题以及这些问题对软件项目的影响。软件风险分析包括风险识别，风险预测，风险评估和风险控制4个不同活动。其中风险控制是利用某些技术和方法设法避开或转移风险，在此活动中，通常需要考虑风险避免，风险监控和风险管理和意外事件计划三方面问题。</p></li><li><p><strong>软件开发模型</strong>    </p></li><li><p>| 模型名称         | 开发方法          | 内容                                       | 图形                                       |<br>| ———— | ————- | —————————————- | —————————————- |<br>| 瀑布模型（SDLC）   | 迭代模型/迭代开发方法   | 结构化开发的典型模型，适用于需求明确的开发                    |                                          |<br>| 演化模型         | 快速应用开发        |                                          |                                          |<br>| 增量模型         | 构件组装模型/基于构件开发 | 原型+瀑布模型，先针对核心开发，在开发过程中不停调整               | <img src="/2018/09/10/软件工程/TIM截图20180913100742.png" alt="TIM截图20180913100742"> |<br>| 螺旋模型         | 统一过程/统一开发方法   | 由多个模型组合，每一个增量都发布一个可以操作的产品 ，版本1 版本2 版本3.。。螺旋模型还包含了原型模型，引入<strong>了风险分析</strong> | <img src="/2018/09/10/软件工程/TIM截图20180913101133.png" alt="TIM截图20180913101133"> |<br>| 快速原型模型       | 敏捷开发方法        |                                          |                                          |<br>| 喷泉模型         | 模型驱动的开发方法     | <strong>面向对象的模型</strong>，其他的都是结构化模型（迭代和无间隙是面向对象的特性）   |                                          |<br>| v模型          | 基于架构的开发方法     | 测试的过程相对于原型模型的一个简单的测试变成了  单元测试，集成测试，可以在需求分析阶段，就可以写验收测试，系统测试所要设计的问题。概要设计（主要是模块的划分）写集成测试（对模块进行测试），详细设计 写单元测试。<strong>测试要贯穿在开发的始终</strong>。 | <img src="/2018/09/10/软件工程/TIM截图20180913101144.png" alt="TIM截图20180913101144"> |<br>| 原型模型         |               | 构造一个简易系统，适用于需求不明确的开发                     |                                          |<br>| 构件组装模型（CBSD） |               | 提高了软件开发的复用性，降低成本，提高可靠性                   | <img src="/2018/09/10/软件工程/TIM截图20180913102248.png" alt="TIM截图20180913102248"> |</p></li><li><p>构件标准： CORBA （IMB）   COM/DCOM/COM(微软家族)     EJB(java 体系中使用的)    </p></li><li><p>敏捷开发方法包括 极限编程（xp）自适应开发，水晶方法，特征驱动开发  SCRUM  </p></li><li><p>使用与小型项目<img src="/2018/09/10/软件工程/TIM截图20180913103604.png" alt="TIM截图20180913103604"></p></li><li><p>软件开发方法：</p></li><li><p>​    一。1，结构化分析和设计：（SA ，SD）是一种面向数据流的需求分析方法，利用图形表达用户需求，常用工具有数据流图，数据字典。DFD ： 描述数据流从输入到输出的变换流程（data  flow  diagram）<img src="/2018/09/10/软件工程/TIM截图20181002163604.png" alt="TIM截图20181002163604"></p></li><li><p>​    2 ，结构化设计 SD  是一种面向数据流的设计方法，以分析阶段产生的文档（数据流图，数据字典，软件需求说明书）为基础，逐步求精和模块化的过程。结构化设计通常可以分为概要设计和详细设计。</p></li><li><p>​    2.1概要设计： 也称为结构设计或者总体设计。概要设计的基本任务，设计软件系统结构，进行模块划分，确定每个模块的功能，接口，模块间的调用关系。概要设计工具：结构图，数据字典（DD）,判定树和判定表。</p></li><li><p>​        2.2详细设计： 为每个模块设计其实现的细节。使用的详细设计工具：程序流程图，盒图（NS图），问题分析图（PAD）,程序设计语言（PDL)</p></li><li><p>​    二。面向数据结构的设计:  根据输入输出数据结构导出程序结构。如jackson方法和warnier方法是两个面向数据结构的设计方法。</p></li><li><p>三。面向对象的分析与设计：运行对象，类，继承多态等概念来构造系统的软件开发方法。</p></li><li><p>​        面向对象= 对象 + 类 + 继承 + 通信</p></li><li><p>​        面向对象的软件开发过程包括分析，系统设计，开发类，组装测试和应用维护等其中分析过程包括问题域分析，应用分析，此阶段主要识别对象与对象之间的关系，最终形成软件的分析模型，并进行评估。设计阶段主要构造软件总的模型，实现相应源代码，在此阶段，需要发现对象的过程，确定接口规格</p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180913103736.png" alt="TIM截图20180913103736"></p></li><li><p>结构化方法缺点 ：一旦开发完成，整个流程是不灵活的，固化的。</p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180913105932.png" alt="TIM截图20180913105932"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180913105049.png" alt="TIM截图20180913105049"></p></li><li><p>设计约束： 限制条件或者说 补充规约，通常是对解决方案的一些约束，所谓 约束是指对开发人员在软件产品设计和构造上的限制</p></li><li><p>逻辑需求实际上指的是业务需求，反映了组织机构或客户对系统，产品高层次的目标要求，它们在项目视图与范围文档中予以说明。</p></li><li><p>软件需求中对软件产品的响应时间，吞吐量，价格等需求的要求都是属于非功能性需求。</p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180913105829.png" alt="TIM截图20180913105829"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180913105255.png" alt="TIM截图20180913105255"></p></li><li><p>MaCabe复杂度：</p></li><li><p>​    有向图的环路复杂度：V = m -n +2  其中m 是边  n  是点   </p></li><li><p>​    <img src="/2018/09/10/软件工程/TIM截图20180914152055.png" alt="TIM截图20180914152055"></p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180914152552.png" alt="TIM截图20180914152552"></p></li><li><p>​</p></li><li><p>系统运行与维护</p></li><li><p>​    <img src="/2018/09/10/软件工程/TIM截图20180914152640.png" alt="TIM截图20180914152640"></p></li><li><p>软件维护的内容包括准确性维护，适应性维护，完善性维护和预防性维护，正确性维护是指改正在系统开发阶段已经发生而系统测试阶段尚未发现的错误。</p></li><li><p>适应性维护是指应用软件适应信息技术变化和管理需求变化而进行的修改。</p></li><li><p>完善性维护主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能和性能特征</p></li><li><p>预防性维护是为了适应未来的软硬件环境变化，主动增加预防性的新功能，以适应于各类变化而不被淘汰。</p></li><li><p>​    <img src="/2018/09/10/软件工程/TIM截图20180914153556.png" alt="TIM截图20180914153556"></p></li><li><p>​</p></li><li><p>​</p></li><li><p>（mvc 模式中，model主要负责数据和业务逻辑，view主要负责呈现，用户界面，controller主要负责model和view的交互）</p></li><li><p>仓库风格优点包括： 1 解决问题的多方法性 2 具有可更改行和可维护性 3 有可重用的知识源   4 支持容错性和健壮性  </p></li><li><p>缺点： 测试困难：由于黑板模式的系统由中央数据构件来描述系统的体现系统的状态，所以系统的执行没有确定的顺序，其结果的可再现性比较差，难于测试</p></li><li><p>2 不能保证有好的求解方案，3 效率低  4 开发成本高  5 缺少对并行机的支持</p></li><li><p>仓库风格包括： 数据库系统，黑板系统，超文本系统</p></li><li><p>编译器可以用于多种架构风格实现。</p></li><li><p>一个模块的作用范围指受该模块内一个判定影响的所有模块的集合。</p></li><li><p>一个模块的控制范围指模块本身以及其所有下属模块的集合</p></li><li><p>一个模块的作用范围应在其控制范围内，其判定所在的模块应在其影响的模块在层次上尽量靠近。如果在设计过程中，发现模块作用范围不在其控制范围内，可以用上移判点 或者下移受判断硬性的模块，将它下移到所在模块的控制范围内的方法进行改进。</p></li><li><p>大规模项目最不适合采用无主程序员组的开发人员组织形式，因此大项目需要主程序员来整合各模块程序。</p></li><li><p>管道过滤器不支持批处理和并发操作。支持重用，提高性能。</p></li><li><p>评价软件的规格说明是否合乎用户的要求，即总体设计思想和设计方阵是否正确，需求规格说明是否得到用户或单位上级机关的批准，需求规格说明与软件的概要设计规格说明是否一致等。</p></li><li><p>评审可靠性，即是否能避免输入异常，硬件失效以及软件失效所产生的失效，一旦发生都能及时采取代替手段恢复手段。</p></li><li><p>评审保密措施实现情况，即是否提供对使用系统资格，对特定数据的使用资格以及特殊功能的使用资格进行检查，在查出有违反使用资格情况后，能否向系统管理人员报告有关信息，是否提供对系统内重要数据加密的功能。</p></li><li><p>评审操作特性实施情况，即操作命令和操作信息的恰当性，输入数据与输入控制语句的恰当性，输出数据的恰当性，应答时间的恰当性等</p></li><li><p>评审性能实现情况</p></li><li><p>评审软件是否具有可修改行，可扩充性，可互换性和可移植性。</p></li><li><p>评审软件是否具有可测试性</p></li><li><p>评审软件是否具有复用性</p></li><li><p><img src="/2018/09/10/软件工程/TIM截图20180916145538.png" alt="TIM截图20180916145538"></p></li><li><p>​</p></li><li><p>ISO/IE  9126 软件质量度量模型中的质量特性，效率质量特性包括时间特性和资源特性两个质量子特性。</p></li><li><p>​</p></li><li><p>| 风险分析 |                                          |<br>| —- | —————————————- |<br>| 风险识别 | 要识别潜在的预算，进度，个体，资源，用户和需求等方面的问题以及对整个项目的影响，并建立风险条目检查表，列出所有可能的风险事项。 |<br>| 风险预测 | 要建立一个表示风险可能性的参考标准，描述风险条目的结果，估计风险对项目的影响等。 |<br>| 风险评估 |                                          |<br>| 风险控制 |                                          |</p></li><li><p>​</p></li><li><p>​</p></li><li><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;软件文档&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;| 按照引发维护的原因分类 | 内容                                       |&lt;br&gt;| ———– | —————————————- |&lt;br&gt;| 改正性维护   
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多媒体</title>
    <link href="http://yoursite.com/2018/09/10/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>http://yoursite.com/2018/09/10/多媒体/</id>
    <published>2018-09-10T02:42:34.000Z</published>
    <updated>2018-10-02T07:11:08.447Z</updated>
    
    <content type="html"><![CDATA[<p>1-3分左右</p><ol><li><p>多媒体基础：</p><ol><li><p>多媒体（Mutilmedia）是融合两种或两种以上媒体的一种人机交互式信息交流和传播媒体，使用的媒体包括文字，图形，图像，声音，动画和电视图像等。要把一台普通的计算机变成多媒体计算机要研究的关键技术是：视频音频信号获取技术，多媒体数据压缩编码和解码技术，视频音频数据的实时处理技术和视频音频数据的输出技术。</p><p>图像分辨率确定的时组成一幅图像像素的数目，显示分辨率确定的时显示图像的区域大小</p><p>   当图像分辨率大于显示分辨率时，在屏幕上只能够显示部分图像。</p><p>   图像分辨率小于显示分辨率，图像只占屏幕的一部分。  </p></li><li><p>多媒体基数概念</p><ol><li><p>音频</p><ol><li><p>声音的带宽</p><ol><li><p>人耳：    20-20KHz</p></li><li><p>说话： 300-3400Hz</p></li><li><p>乐器：20-20KHz</p></li><li><p>超声波：超过20KHz</p></li><li><p>次声波：低于20Hz</p><p>声音的信号是模拟信号，计算机能够处理的信号是数字信号</p><p>所以需要进行采样</p></li></ol></li><li><p>采样：</p><ol><li>采样频率：采样频率越高，采点越多，声音的还原度越高</li><li>采样精度：</li><li>采样频率应为声音最高频率2倍</li><li>​</li><li><img src="/2018/09/10/多媒体/TIM截图20180906111425.png" alt="TIM截图20180906111425"></li><li>数据传输率（b/s） =采样频率 （Hz）X  量化位数（b）x 声道数</li><li>声音信号是一种模拟信号，计算机要对其进行处理，必须要将其转换为数字声音信号即用二进制数字的编码形式来表示声音。最基本的声音信号数字化方法是  取样——量化法</li><li>采样：把时间连续的模拟信号转换成时间爱你离散，幅度连续的信号。在某些特定的时刻获取声音信号幅值叫做采样。由这些特定时刻采样得到的信号称为离散时问信号。一般都是每隔相等的一小段时间采样一次，其时间间隔称为取样周期，其倒数称为采样频率。采样定理是选择采样频率的理论依据，为了不产生失真，采样频率不应低于声音信号最高频率的两本。因此，语言信号的采样频率一般为8KHz,音乐信号的采样频率应该在40KHz以上，采样频率越高，可回复的声音信号分量越丰富，其声音的保真度越好。</li><li>量化：把在幅度上连续取值（模拟量）的每一个样本转换成离散值（数字量），因此量化过程有时也称为A/D （模数转换），量化后的样本是用若干位二进制（bit）来表示的，位数的多少反映了度量声音波形幅度的精度，称为量化精度，也称为量化分辨率。如，每个声音样本若用16位（2个字节）表示，则声音样本的取值范围是  0~65536   ，精度是  1/65536 ,若只用8位（1个字节）表示，则样本的取值范围 0~255，精度为1/256。量化精度越高声音的质量越好，选用的存储空间越多。</li><li>编码：经过采样和量化处理后的声音信号已经是数字形式了，为了便于计算机存储，处理和传输，必须按照约定的要求进行数据压缩和编码，即选择一种或者集中方式对其进行数据压缩，以减少数据量，再按照某种规定的格式将数据组织成为文件。</li></ol></li></ol></li><li><p>图像</p><p>(亮度，色调，色饱和度三个物理量来描述，并称为色彩三要素)</p><ol><li><p>亮度：画面的明亮程度，亮度是描述光作用域人眼时引起的明暗程度感觉，是指色彩明暗深浅程度</p></li><li><p>色调（红，绿）：指颜色的类别，如红色，绿色，蓝色等不同颜色就是指色调</p></li><li><p>饱和度：色饱和度指某一颜色的深浅程度（或浓度）</p></li><li><p>彩色空间：</p><p>（彩色打印的纸张是不能够发射光纤的，因而彩色打印机使用了能够吸收特定的光波而反射其他光波的油墨或颜料来实现。用油墨或颜料进行混合得到的彩色称为相减混色，原因是减少了人眼识别颜色所需要的反射光。根据三基色原理，油墨或颜料的三基色是青色（Cyan）,品红（magenta）和黄 （yellow） Cmy。可以用这三种颜色的油墨或颜料按照不同比例混合成任何一种由油墨或颜料表现出来的颜色，这种彩色表示方法称为CMY彩色额空间。）</p><ol><li><p>RGB(电脑显示器，彩色显示器   三原色，red  green  blue，白色是其他颜色经过配合出来的)</p></li><li><p>YUV（电视，兼容）</p></li><li><p>CMY(CMYK)印刷领域 c  cyan  m  magenta   y yellw  </p><p>​    光的三原色是叠加，印刷是相减的原理</p><p>三种中，黑色难调且贵，后又使用 K   即加入黑色原料</p></li><li><p>HSV（HSB)</p></li></ol></li></ol></li><li><p>媒体的种类：</p><p>| 名称             | 内容                                       |<br>| ————– | —————————————- |<br>| 感觉 媒体          | 人们接触信息的感觉形式，如视，听,触觉，嗅觉，味觉等               |<br>|                | 信息的表示形式，如文字，图形，图像，动画，音频和视频等              |<br>| <strong>显示媒体（表现媒体）</strong> | <strong>表现和获取信息的物理设备，如输入显示媒体键盘，鼠标，麦克风等，输出显示媒体显示器，打印机和音箱等</strong> |<br>| 存储媒体           | 存储数据的物理设备，如磁盘，光盘，内存等                     |<br>| 传输媒体           | 传输数据的物理载体，如电缆，光缆和交换设备等                   |</p><p>​</p></li></ol></li><li><p>多媒体相关计算问题</p><ol><li><p>图像容量计算</p><ol><li><p>知道像素，位数     </p><ol><li><p>每个像素为16位，图像为640x480，求容量</p><p>16位表示每个像素点使用多少个bit位存储像素点</p><p>占据的字节：16/8 = 2 个字节</p><p>640<em>480</em>16/8 =614,400B</p></li></ol></li><li><p>知道像素，色数</p><ol><li><p>640x480像素，256色的图像，求容量</p><p>色数： 2^k  = 色数 ，K 代表着位数，颜色信息需要使用8个bit位来存储</p><p>8个bit 位就是一个字节 Byte</p><p>640x480xlog2(256)/8=307,200B</p></li></ol></li></ol></li><li><p>音频容量计算</p><p>容量= 采样频率   x   量化   /   采样位数(位)  x   声道数 / 8</p></li><li><p>视频容量计算</p><p>容量 =  每帧图像容量（Byte)  X   每秒帧数 X  时间 + 音频容量 X  时间</p><p><img src="/2018/09/10/多媒体/TIM截图20180906154943.png" alt="TIM截图20180906154943"></p></li></ol></li><li><p>常见多媒体标准</p><ol><li>JPEG即联合图像专家组，是一种支持8位和24位色彩的压缩位图格式，是目前一种非常流行的图像文件格式。</li><li>MPEG是动态图像专家组，具体包括MPEG-1,MPEG-2,MPEG-4,MPEG-7,MPEG-12等子标准</li><li>ADPCM是自适应差分脉冲编码调制的简称，常用语数字通信系统中，既不是图像编码也不是视频编码的国际标准</li><li>H.261  又称为P*64，其中P为64Bb/s的取值范围，是1到30的可变参数，它最初是针对ISDN实现电话会议应用特别是面对面的可视电话和视频会议而设计的。</li></ol><p><img src="/2018/09/10/多媒体/TIM截图20180906155430.png" alt="TIM截图20180906155430"></p></li><li><p>数据压缩技术</p><p>有损压缩和无损压缩<img src="/2018/09/10/多媒体/TIM截图20180906163704.png" alt="TIM截图20180906163704"></p><p>​    <img src="/2018/09/10/多媒体/TIM截图20180908180553.png" alt="TIM截图20180908180547"></p><p>​用户因为等待时间长而放弃下载或显示图片、影像的问题：图片或影像文件过大且不支持一遍下载一边观看。能够解决这个问题的最好办法是流媒体，而JPEG累进编码方式和GIF图像文件格式都支持一定程度上的压缩，可以减少原文件的大小。AD/DA 变换描述的时数字信息和模拟信息的转换。</p><p>​</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1-3分左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多媒体基础：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多媒体（Mutilmedia）是融合两种或两种以上媒体的一种人机交互式信息交流和传播媒体，使用的媒体包括文字，图形，图像，声音，动画和电视图像等。要把一台普通的计算机变成多媒体计算机
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多媒体" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>法律法规</title>
    <link href="http://yoursite.com/2018/09/10/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    <id>http://yoursite.com/2018/09/10/法律法规/</id>
    <published>2018-09-10T02:37:56.000Z</published>
    <updated>2018-10-03T10:03:53.926Z</updated>
    
    <content type="html"><![CDATA[<p>涉及到的法律法规角度：</p><p>​    著作权法</p><p>​    计算机软件保护条例</p><p>​        商标法</p><p>​    专利法</p><p>考点——保护期限</p><p>​        著作权：</p><table><thead><tr><th>客体类型</th><th>权力类型</th><th>保护期限</th></tr></thead><tbody><tr><td>公民作品</td><td>署名权，修改权，保护作品完整权</td><td>没有限制</td></tr><tr><td></td><td>发表权，使用权 获得报酬权</td><td>作者终生及其死亡后的50年（第50年的12月31号）</td></tr><tr><td>单位作品</td><td>发表权，使用权和获得报酬权</td><td>50年（首次发表后的第50年的12月31日）若期间未发表，不保护</td></tr><tr><td>公民软件产品</td><td>署名权，修改权</td><td>没有限制</td></tr><tr><td>公民软件产品</td><td>发表权，复制权，发行权，出租权，信息网络传播权，翻译权，使用许可权，获得报酬权，转让权</td><td>作者终生及死后的50年（第50年12月31日）,合作开发，以最后死亡作者为准</td></tr><tr><td>单位软件产品</td><td>发表权，复制权，发行权，出租权，信息网络传播权，翻译权，使用许可权，获得报酬权，转让权</td><td>50年（首次发表后的第50年的12月31日）,若期间未发表，不保护</td></tr><tr><td>注册商标</td><td></td><td>有效期10年（若注册人死亡或倒闭1年后，未转移则可注销，期满后6个月内必须续注）</td></tr><tr><td>发明专利权</td><td></td><td>保护期2为20年，从申请日开始</td></tr><tr><td>使用新型和外观设计专利权</td><td></td><td>保护期为10年，从申请日开始</td></tr><tr><td>商业机密</td><td></td><td>不确定，公开后公众可以使用</td></tr></tbody></table><p>​    知识产权人确定</p><p><img src="/2018/09/10/法律法规/知识产.png" alt="知识产"></p><p>​        <img src="/2018/09/10/法律法规/T.png" alt="T">    </p><p>​    侵权判断</p><p>​       中国公民，法人或者其他组织的作品，不论是否发表，都享有著作权</p><p>​    开发软件所用的思想，处理过程，操作方法或者数学概念不受保护</p><p>​    著作权法不使用的情况：    </p><p>​       法律，法规，国家机关的决议，决定，命令和其他具有立法，行政，司法性质的文件，及其官方正式译文</p><p>​      时事新闻</p><p>​      历法，通用数表，通用表格和公式</p><p>​    <img src="/2018/09/10/法律法规/TIM8.png" alt="TIM8"></p><p>知识产权：    </p><ol><li><p>​    著作权及邻接权</p><p>​        邻接权： 保护了出版商的权利，保护著作权意外，和著作权相关的权利</p><ol><li>​专利权</li><li>​工业品外观设计权</li><li>​商标权</li><li>​地理标志权</li></ol><p>​     </p><ol><li>​集成电路布图设计权</li></ol></li></ol><p>标准化</p><p>​     </p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>国际标准</td><td>ISO,IEC 等国际标准化组织</td></tr><tr><td>国家标准</td><td>GB-中国  ANSI-美国  BS-英国   JIS -日本</td></tr><tr><td></td><td>又称为地区标准，如PASC-太平洋地区标准会议  CEN-欧洲标准委员会，ASAC-亚洲标准咨询委员会， ARSO-非洲地区标准化组织</td></tr><tr><td></td><td>GJB-中国军用标准，MIT-S 美国军用标准 ，IEEE-美国电气电子工程师协会</td></tr><tr><td></td><td>国家的地方一级行政机构制定的标准</td></tr><tr><td></td><td></td></tr><tr><td>项目规范</td></tr></tbody></table><p>标准的编号</p><table><thead><tr><th>类型</th><th>编号内容</th></tr></thead><tbody><tr><td>国际，国外标准代号</td><td>标准代号+专业类号+顺序号+年代号</td></tr><tr><td></td><td>强制性标准代号为GB,推荐性标准代号为GB/T，指导性标准代号为GB/Z,实物标准代号为GSB</td></tr><tr><td></td><td>由汉语拼音大写字母组成如  电子行业为（SJ）Q3(航天)，JB(机械)，JR(金融系统)</td></tr><tr><td></td><td>由DB加上省级行政区划代码的前两位</td></tr><tr><td>企业标准代号</td><td>由Q加上企业代号组成</td></tr></tbody></table><p>标准化法规定：国家标准，行业标准分为强制性标准和推荐标准。保障人体健康，人身，财产安全的标准和法律，行政法规规定强制执行的标准是强制性标准，其他标准是推荐性标准。</p><p>​    省，自治区，直辖市标准化行政主管部门制定的工业产品的安全，卫生要求的地方标准，在本行政区域内是强制性标准。</p><p>​    根据我国标准化法，我国标准可以分为国家标准，行业标准，地方标准和企业标准，其中，国家标准，行业标准和地方标准又可以分为强制性标准和推荐性标准。它们分别具有其代号和编号，通过标准的代号可以确定标准的类别。行业标准是由行业标准组织制定和公布适应于器业务领域的标准，其推荐性标准，由行业汉字拼音大写加   “ /I “组成。已经正式公布的行业代号 Q3 航天  SJ 电子  JB 电子  JR  金融等。</p><p>专利法明确规定，智力活动的规则和方法不取得专利权，智力活动规则和 方法是直接作用域人的思维，与产业生产中的技术活动不发生直接关系，并不是对自然规律的利用，不属于技术方案。通常智力活动规则和方法是一些人为的规则，如管理规则，游戏规则，统计方法，分类方法和计算方法等。</p><p> 算法被认为是一种数学公式，反映的是自然法则和逻辑思维过程，属于智力活动规则和方法，不能受到专利法的保护。算法对于计算机软件而言极其重要，设计算机程序的基础，计算机软件总是离不开算法，因此计算机软件本身属于智力活动规则和方法的范畴，不能授予专利权，无论是源程序还是目标程序，它体现的时智力活动的规则和方法，因此仅仅以单纯的计算机程序为题的发明创造是不能够获得专利权的。</p><p>​    。。。 如，抽象出一种生产过程的数学模式，设计一种算法，通过予以运行用于控制生产过程就能够获得专利保护。也就是，智力活动规则和方法本身不被授予专利权，但进行智力活动的机器设备，装置或者根据智力活动规则和方法而设计制造的一起，装置等都可以获得专利保护。即软件和硬件或者工业产品结合并表现为机器，装置或者为达到某种结果表现为方法时，软件可以成为专利保护的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;涉及到的法律法规角度：&lt;/p&gt;
&lt;p&gt;​    著作权法&lt;/p&gt;
&lt;p&gt;​    计算机软件保护条例&lt;/p&gt;
&lt;p&gt;​        商标法&lt;/p&gt;
&lt;p&gt;​    专利法&lt;/p&gt;
&lt;p&gt;考点——保护期限&lt;/p&gt;
&lt;p&gt;​        著作权：&lt;/p&gt;
&lt;table&gt;
&lt;
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="法律法规" scheme="http://yoursite.com/tags/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="http://yoursite.com/2018/09/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/09/10/操作系统/</id>
    <published>2018-09-10T02:29:01.000Z</published>
    <updated>2018-10-06T04:03:54.182Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统：@管理系统的软硬件，数据资源 @ 控制程序运行  @ 人机之间的接口</p><p>​         @应用软件与硬件之间的接口（5-7分左右）</p><table><thead><tr><th>进程管理</th><th>进程的状态  前趋图   PV操作   死锁问题</th></tr></thead><tbody><tr><td>存储管理</td><td>段页式存储     页面置换算法</td></tr><tr><td>文件管理</td><td>索引文件    位示图</td></tr><tr><td>作业管理</td><td></td></tr><tr><td>设备管理</td><td></td></tr><tr><td>微内核操作系统</td><td>虚设备与SPOOLING技术</td></tr></tbody></table><p><img src="/2018/09/10/操作系统/TIM截图20180908094850.png" alt="TIM截图20180908094850"></p><p>PV操作——进程管理</p><p>​    临界资源：各个进程间需要互斥方式对其进行共享的资源如打印机，磁带机‘</p><p>​    临界区：每个进程中访问临界资源的那段代码称为临界区</p><p>​    信号量： 是一种特殊的变量</p><p><img src="/2018/09/10/操作系统/TIM截图20180908132701.png" alt="TIM截图20180908132701"></p><p>死锁问题：如果一个进程在等待一件不可能发生的事，则进程就死锁了而如果一个或多个进程产生死锁，就会造成系统死锁</p><p>死锁的预防：打破死锁的四个条件   互斥+环路等待+不剥夺+保持和等待</p><p>死锁的避免：有序资源分配，银行家算法</p><p>银行家算法：分配资源的原则：@当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程  @ 进程可以分期请求资源，但请求的总数不能超过最大需求量  @当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间内得到资源。<img src="/2018/09/10/操作系统/TIM截图20180908142258.png" alt="TIM截图20180908142258"></p><p>存取存储组织：</p><p>​    <img src="/2018/09/10/操作系统/TIM截图20180908143248.png" alt="TIM截图20180908143248"></p><p>​    段页式存储的特点，以及运作的方法</p><p>​    页式存储的物理地址与逻辑地址的转化<img src="/2018/09/10/操作系统/TIM截图20180908150412.png" alt="TIM截图20180908150412"></p><p><img src="/2018/09/10/操作系统/TIM截图20180908150515.png" alt="TIM截图20180908150515"></p><p>按照逻辑结构来划分段号，划分的段是不均匀的。</p><p>固定分区管理方案： 固定分区是一种静态分区方式，在系统生成时已将主存区划分为若干个分区，每个分区的大小可不等。操作系统通过主存分配情况表管理主存区。问题：已分配区中存在未用空间，原因是程序或作业的大小不可能都刚好等于分区的大小，造成了空间的浪费。通常将已经分配分区的未用空间叫做零头或内碎片。</p><p>请求分页存储管理：将一个进程的地址空间划分为若干个大小相等的区域。称为页。相应的，将主存空阿金划分成与页相同大小的若干个物理块，称为块或页框。在为进程分配主存时，只装入若干页的用户进程和数据而非全部程序，就可以启动运行，而且若干页分别装入多个不相邻的物理块中。当访问的页面不在主存中，产生缺页中断，系统通过调页功能和页面置换功能，陆续将要使用的页面调入主存区，同时把暂不运行的页面置换到外存上。因此该方案当一个作业的程序地址空间大于主存空间可以使用的空间时，也可以执行</p><p>​    覆盖技术指的是让作业中不同时运行的程序模块共同使用统一贮存区域。这样，不必将程序完全装入到主存区就可以运行。当运行中调用另一个模块时，再从辅存中调入这个模块而将原来已经运行完成的程序模块覆盖，即装入到同一存储区域内。对此要求用户明确地描述作业中各个程序模块间的调用关系，这将加重用户负担。</p><p><img src="/2018/09/10/操作系统/TIM截图20180916153617.png" alt="TIM截图20180916153617"></p><p><img src="/2018/09/10/操作系统/TIM截图20180916153602.png" alt="TIM截图20180916153602"></p><p>文件管理：</p><p>​  索引文件结构（13 个 索引节点  从 0至12 ）</p><p>@直接索引@一级间接索引@二级间接索引@三级间接索引@文件本身的扩展</p><p><img src="/2018/09/10/操作系统/TIM截图20180908154050.png" alt="TIM截图20180908151251"></p><p>文件和树型目录结构</p><p>​文件属性： R  read  只读文件属性        A   存档属性</p><p>​           S  系统文件                       H  隐藏文件</p><p>文件名的组成:  驱动器号+路径+主文件名+扩展名</p><p>@绝对路径： 从盘符开始的路径</p><p>@相对路径： 从当前路径开始的路径</p><p>微内核操作系统：</p><table><thead><tr><th>实质</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>将图形，设备驱动以及文件系统等功能全部在内核中实现，运行在内核状态和同一地址空间</td><td>减少进程间通信和状态切换的系统开销，获得较高的运行效率</td><td>内核庞大，占用资源较多且不易剪裁。系统的稳定性和安全性不好</td></tr><tr><td>只实现基本功能，将图形系统，文件系统，设备驱动以及通信功能放在内核之外</td><td>内核精炼，便于剪裁和移植。系统服务程序运行在用户地址空间，系统的可靠性，稳定性和安全性较高。可用于分布式系统</td><td>用户状态和内核状态需要频繁切换，从而导致系统效率不如单体内核</td></tr></tbody></table><p>分为用户态和核心态 用户态和核心态之间会有交互。</p><p>​      @用户态包括： 客户进程，进程服务器，终端服务器，文件服务器，存储器服务器等</p><p>​    @核心态包括：（主要是内核中的内容）</p><p>Spooling 技术 实际上是用一类物理设备模拟另一类物理设备的技术，是使独占使用的设备编程多台虚拟设备的一种技术，也是一种速度匹配技术。Spooling 系统是由   预输入程序   缓输出程序 和并管理程序以及 输入和输出并组成的。其中输入井和输出井是为了存放从输入设备输入的信息以及作为作业执行的结果，系统在磁盘上开辟的存储空间。</p><p><img src="/2018/09/10/操作系统/TIM截图20180912162028.png" alt="TIM截图20180912162028"></p><p><img src="/2018/09/10/操作系统/TIM截图20180912162014.png" alt="TIM截图20180912162014"></p><p><img src="/2018/09/10/操作系统/TIM截图20180916190347.png" alt="TIM截图20180916190347"></p><table><thead><tr><th>磁盘分区，格式化，碎片整理，磁盘清理</th><th></th></tr></thead><tbody><tr><td>磁盘分区</td><td>将一块容量相对 较大的磁盘划分为多块容量相对较小的磁盘，磁盘分区并不删除磁盘上的数据，但一般情况下，磁盘分区后要经过格式化才能够使用</td></tr><tr><td></td><td>在往磁盘的所有数据区写0的操作过程，是一种纯物理操作，同时对磁盘介质做一致性检测，并标记处不可读和坏的扇区，在格式化之后，磁盘原有的数据被清除</td></tr><tr><td></td><td>可以删除计算机上的文件，但主要用于删除计算机上不需要的文件</td></tr><tr><td></td><td>通过系统软件或一些专业的磁盘碎片整理软件对计算机磁盘在长期使用过程中产生的碎片和凌乱文件重新整理，以释放出更多可用的存储空间</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;操作系统：@管理系统的软硬件，数据资源 @ 控制程序运行  @ 人机之间的接口&lt;/p&gt;
&lt;p&gt;​         @应用软件与硬件之间的接口（5-7分左右）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;进程管理&lt;/th&gt;
&lt;th&gt;进程的状态  前趋图   PV
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>uml</title>
    <link href="http://yoursite.com/2018/09/10/uml-1/"/>
    <id>http://yoursite.com/2018/09/10/uml-1/</id>
    <published>2018-09-10T02:17:35.000Z</published>
    <updated>2018-09-18T11:34:58.047Z</updated>
    
    <content type="html"><![CDATA[<p>uml文档仅仅是设计与开发人员采用uml语言进行系统分析与设计的结果，并没有给出如何进行开发和采用何种开发流程，同样也不指导如何进行面向对象设计。</p><p>uml中的构件是遵从一组接口并提供一组接口的实现，构件表示的是物理模块而不是逻辑模块</p><p>软件开发模型：</p><p>瀑布模型给出了软件生存周期中制定开发计划，需求分析，软件设计，编码，测试和维护等阶段以及各阶段的固定顺序，上一阶段完成后才能够进行到下一阶段，整个过程如同瀑布流水。该模型为软件的开发和维护提供了一种有效的管理模式，但在大量的实践中暴露出其缺点,其中最突出的时缺乏灵活性。特别是无法解决软件需求不明确或不准确的问题，所以瀑布模型适用于需求明确，且很少发生较大变化的项目。</p><p> 为了克服瀑布模型的缺点，演化模型允许在获取了一组基本需求之后，通过快速法分析构造出软件的初始可运行版本（原型），然后根据用户在适用原型的过程中提出的意见对原型进行改进，从而获得原型的新版本。这一过程重复进行指导得到令用户满意的软件。该模型和螺旋模型，喷泉模型等使用与对软件需求缺乏明确认识的项目。</p><p>​    螺旋模型是将瀑布模型和演化模型进行结合，在保持二者有点的同时增加了风险分析，从而弥补了二者的不足，该模型沿着螺旋旋转，并通过笛卡尔坐标的四个象限分别表示四个方面的活动：制定计划，风险分析，实施工程和客户评估。螺旋模型为项目管理人员及时调整管理决策提供了方便，进而可以降低开发风险。</p><p>​    喷泉模型是以面向对象的软件开发方法为基础，以用户需求为动力，以对象来驱动的模型。该模型主要用于描述面向对象的开发过程，体现了面型对象开发过程的迭代和无间隙特性。迭代指模型中的活动通常需要重复多次，相关功能在每次迭代中被加入新的系统。无间隙是指在各开发活动之间没有明显边界。</p><p><img src="/2018/09/10/uml-1/gitworkspace\Myzss.github.io\source\_posts\uml-1\TIM截图20180912160842.png" alt="TIM截图20180908181147"></p><p><img src="/2018/09/10/uml-1/TIM截图20180912213811.png" alt="TIM截图20180912213811"></p><p><img src="/2018/09/10/uml-1/TIM截图20180912220237.png" alt="TIM截图20180912220237"></p><p>聚合和组合都是表示整体和部分的关系</p><p>不同点：聚合比哦啊是的是一种共享关系，聚合里边的部分可以被其他整体共享</p><p>组合关系汇总表示部分的类与表示整体的类有着紧密的联系，整体不存在的话部分也就不存在了。</p><p>部署图展现了运行处理结点以及其中的构件的配置，部署图给出了体系结构的静态实施视图。与构建视图相关，通常一个结点包含一个或多个构件。</p><p>uml中状态图的转换应该有事件标记和警界条件，转换应该有多个状态</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;uml文档仅仅是设计与开发人员采用uml语言进行系统分析与设计的结果，并没有给出如何进行开发和采用何种开发流程，同样也不指导如何进行面向对象设计。&lt;/p&gt;
&lt;p&gt;uml中的构件是遵从一组接口并提供一组接口的实现，构件表示的是物理模块而不是逻辑模块&lt;/p&gt;
&lt;p&gt;软件开发模型
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="uml" scheme="http://yoursite.com/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/27/hello-world/"/>
    <id>http://yoursite.com/2018/07/27/hello-world/</id>
    <published>2018-07-27T00:28:06.439Z</published>
    <updated>2018-08-12T08:12:33.134Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
