<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myzss blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T03:35:23.413Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Myzss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据流图</title>
    <link href="http://yoursite.com/2018/09/10/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/09/10/数据流图/</id>
    <published>2018-09-10T03:35:23.000Z</published>
    <updated>2018-09-10T03:35:23.413Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>数据流图基本概念：    </p></li><li><p>数据字典</p></li><li><p>数据字典条目定义形式</p><p>| 符号                   | 含义          | 说明                             |<br>| ——————– | ———– | —————————— |<br>| =                    | 被定义为        | x=a+b x 被定义为a+b形式              |<br>| +                    | 与,表示顺序连接的关系 | x=a+b,表示x由a和b组成                |<br>| […,…]或[…|…] | 或，代表从中选择一个  | x=[a,b] ,x =[a|b] 表示x由a或者由b组成 |<br>| {….}               | 重复          | x={a},表示x由0个或者n个a组成            |<br>| （…）                | 可选          | x=(a)  表示a 可在x中出现，也可以不出现       |</p><p>​</p></li><li><p>数据平衡原则：</p><p>父图和子图的平衡表示：父图的输入/输出数据流与子图的输入/输出数据流一致，有时看起来不一致，但通过查验数据字典可能发现时一致的。</p><p>UML ： 关联和聚合的关系和不同</p><p>关联关系： 关联表示两个类的实例之间存在的某种语义上的联系，如一个老师为某个学校工作，一个学校有多间教室，认为老师与学校，学校与教室之间存在着关联关系，关联关系为类之间的通信提供了一种方式，它是所有关系中最通用，语义最弱。关联关系通常又包含了聚集关系和组合关系</p><p>​    聚集关系： 是关联关系的特例，聚集关系表示一种整体和部分的关系。如一个电话机包含一个话筒，一个电脑包含显示器，键盘和主机都是聚合关系</p><p>​       组合关系： 如果聚集关系中表示部分的类存在，与表示整体的类有紧密的关系，如公司和部门之间的关系，就应该使用组合关系来表示</p><p>关联与聚集之间的不同点在于：</p><p>​    聚集表示部分与整体关系的关联，若从生命周期的角度考虑，则关联对象的生命周期一般无必然联系，聚集的整体对象往往对部分对象的生命周期负责（特指组合）</p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据流图基本概念：    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据字典&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据字典条目定义形式&lt;/p&gt;
&lt;p&gt;| 符号                   | 含义          | 说明                
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件工程-数据流图" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计</title>
    <link href="http://yoursite.com/2018/09/10/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2018/09/10/面向对象设计/</id>
    <published>2018-09-10T03:32:11.000Z</published>
    <updated>2018-09-10T03:34:57.106Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>设计原则</th><th>内容</th></tr></thead><tbody><tr><td></td><td>设计目的单一的类（避免紧耦合）</td></tr><tr><td></td><td>对扩展开放，对修改封闭</td></tr><tr><td>李氏替换原则</td><td>子类可以替换父类（子类继承了父类的方法，且拥有自己方法，可以替换父类），而替换时需要子类不要大量的进行重载</td></tr><tr><td></td><td>要依赖于抽象，而不具体实现；针对接口编程，不要针对实现编程（依赖于接口，使操作灵活）</td></tr><tr><td>接口隔离原则</td><td>使用多个专门的接口比使用单一的总接口要好（接口单一的做一件事情，不会出现疏漏）</td></tr><tr><td>组合重用原则</td><td>要尽量使用组合，而不是继承关系达到重用目的（继承是一个紧耦合关系，因为父类一变，子类跟着变）</td></tr><tr><td>迪米特原则（最少知识法则）</td><td>一个对象应当对其他对象有尽可能少的了解（信息隐蔽）</td></tr></tbody></table><p>UML :</p><p>  规则，公共机制（包含规格说明，修饰，公共分类，扩展机制 ）</p><p>  构造块:事务：结构事物，行为事物，分组事物，注释事物</p><p>​          关系：依赖，关联，泛化，实现</p><p>​        图：  </p><table><thead><tr><th>种类</th><th>图</th></tr></thead><tbody><tr><td>需求分析图</td><td>用例图（系统和外界的交互，有时被称为静态，有时被称为动态多）</td></tr><tr><td>静态结构图</td><td>类图（表述类中的属性方法）</td></tr><tr><td></td><td>对象图（表述对象之间的方法）</td></tr><tr><td></td><td>包图（包与包之间的关系，以及包内部的结构）</td></tr><tr><td></td><td>组合结构图</td></tr><tr><td></td><td>构件图</td></tr><tr><td></td><td>部署图（表述的软件的部件应该部署到那个硬件上）</td></tr><tr><td></td><td>制品图</td></tr><tr><td>动态行为图</td><td>顺序/序列图（强调时间关系）</td></tr><tr><td></td><td>通信/协作图（相同，与顺序区别：通信图没有强调时间关系）</td></tr><tr><td></td><td>定时图</td></tr><tr><td></td><td>状态图（状态的变迁）</td></tr><tr><td></td><td>活动图（流程图的结构一致）</td></tr><tr><td></td><td>交互概览图</td></tr></tbody></table><p>设计模式：</p><p>（    被用来在特定情况下解决一般设计问题的类和相互通信的对象的描述。一般而言一个设计模式有4个基本要素：模式名称，问题（模式的使用场合），解决方案和效果</p><p>设计模式是人们可以简单方便的复用成功的设计和体系结构，将已经证实的技术表述成设计模式，也会使新系统的开发者更加易于理解其设计思路。设计模式可以帮助开发者做出有利于复用的选择，避免设计时损害系统复用性。）</p><p>​    架构模式： 软件设计中高层决策，如c/s 结构属于架构模式，架构模式反映了开发系统过程中所作的基本设计决策（全局的看待问题，解决问题）</p><p>​      设计模式：主要关注软件系统的设计，与具体的实现语言无关（局部的设计问题，进行构件设计时，会用到设计模式）</p><p>​     惯用法： 最底层的模式，关注软件系统的设计与实现，实现是通过某种特定的程序语言来描述构件与构件之间的关系，每种编程语言都有自己特定的模式，即语言的惯用法 ，如引用计数就是c++ 语言中的一种惯用法（与语言相关）</p><p>设计模式分类：</p><p>​    </p><table><thead><tr><th>分类</th><th>设计模式</th><th>内容</th><th>简化记忆</th></tr></thead><tbody><tr><td>创建型模式（即用于创建对象的模式为设计类的实例化新对象）只是用new 来创建对象，往往灵活度不够</td><td><strong>工厂方法模式</strong>Factory Method</td><td>定义一个创建对象的接口，但是由子类决定需要实例化哪一个对象，这个模式使得子类实例化的过程推迟</td><td></td></tr><tr><td></td><td>抽象工厂模式Abstract Factory</td><td>提供一个接口，可以创建一系列相关或相互依赖的对象，无需指定他们具体的类</td><td></td></tr><tr><td></td><td>原型模式  Prototype</td><td>用原型实例指定创建对象的类型，并且通过拷贝这个原型为对象</td><td></td></tr><tr><td></td><td>单例模式Singleton</td><td>保证一个类只有一个实例，并提供一个访问它的全局访问点</td><td></td></tr><tr><td></td><td>构建器模式  Builder</td><td>将一个复杂类的表示与其构造相分离，是的相同的构建过程能够得出有不同的表示</td><td></td></tr><tr><td>结构型模式（）</td><td><strong>适配器模式</strong>Adapter</td><td>将一个类的接口转换成用户希望得到的另一种接口，它是的原本不相容的接口得以协同工作</td><td>转换接口</td></tr><tr><td></td><td>桥接模式Bridge</td><td>将类的抽象部分和它的实现部分分离开来，使他们可以独立地变化</td><td>继承树拆分</td></tr><tr><td></td><td>组合模式Composite0</td><td>将对象组合成树型结构以表示整体部分的层次结构，使得用户对单个对象和组合对象的使用具有一致性</td><td>树形目录结构</td></tr><tr><td></td><td>装饰模式Decoratoer</td><td>动态地给一个对象添加一些额外的职责，他提供了用子类扩展功能的一个灵活的替代，比派生一个子类更加的灵活</td><td>附加职责</td></tr><tr><td></td><td>外观模式Facade</td><td>定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用</td><td>对外统一接口</td></tr><tr><td></td><td>享元模式Flyweight</td><td>提供支持大量细粒度对象共享的有效方法</td><td></td></tr><tr><td></td><td>代理模式Proxy</td><td>为其他对象提供一种代理以控制整个对象的访问</td><td></td></tr><tr><td>行为型模式（描述类或对象的交互、职责的分配）</td><td>职责链模式chain of responsibility</td><td>通过给各个对象处理请求的机会，减少请求的发送者与接收者之间的耦合机会。将接收者对象链接起来，在链中传递请求，直到有一个对象处理这个请求</td><td>传递职责</td></tr><tr><td></td><td>命令模式command</td><td>讲一个请求封装成一个对象，从而可以用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作</td><td>日志记录，可撤销</td></tr><tr><td></td><td><strong>解释器模式</strong>Interpreter</td><td>给定一种语言，定义它的文法表示，并定义一个解释器，改解释器用来根据文法表示来解释语言中的句子</td><td></td></tr><tr><td></td><td>迭代器模式Iterator</td><td>提供一种方法来顺序访问一个聚合对象中的各个元素而不需要暴露改对象的内部表示</td><td></td></tr><tr><td></td><td>中介者模式Mediator</td><td>用一个中介对象来封装一系列的对象交互。它使各对象不需要显式的相互调用，从而达到低耦合，还可以独立地改变对象间的交互</td><td>不直接引用</td></tr><tr><td></td><td>备忘录模式Memento</td><td>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态</td><td></td></tr><tr><td></td><td>观察者模式Observer</td><td>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新</td><td></td></tr><tr><td></td><td>状态模式State</td><td>允许一个对象在其内部状态改变时改变它的行为</td><td></td></tr><tr><td></td><td>策略模式Strategy</td><td>定义一系列算法，把它们一个个封装起来，并且使它们之间可互相替换，从而让算法可以独立于使用它的用户而变化</td><td>多方案切换</td></tr><tr><td></td><td><strong>模板方法模式</strong>Template Method</td><td>定义一个操作中算法骨架，而将一些步骤延迟doa子类中，使得子类可以不改变一个算法的结构即可重新定义算法的某些特定步骤</td><td></td></tr><tr><td></td><td>访问者模式Visitor</td><td>表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作</td></tr></tbody></table><p>​    粗体表示既可以是类模式，也可以是对象模式</p><p>其他的表示只是对象模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设计目的单一的类（避免紧耦合）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;对扩展开放
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>信息安全</title>
    <link href="http://yoursite.com/2018/09/10/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/09/10/信息安全/</id>
    <published>2018-09-10T03:22:44.000Z</published>
    <updated>2018-09-10T03:27:50.089Z</updated>
    
    <content type="html"><![CDATA[<p>安全属性：</p><ol><li>保密性： 最小授权原则，防暴露，信息加密 ，物理保密</li><li>完整性  ：安全协议，验证码 ，密码校验，数字签名 ，公证</li><li>可用性：综合保障（ip 过滤，业务流控制，路由选择控制，审计跟踪）</li><li>不可抵赖性：数字签名</li></ol><p>对称加密技术</p><p>​    （对称加密，使用公钥加密，使用公钥解密）<img src="/2018/09/10/信息安全/TIM截图20180905214631.png" alt="TIM截图20180905214631"></p><p>缺点： 加密强度不高，密钥分发困难</p><p>非对称加密技术</p><p>​        （非对称加密：使用公钥加密，使用私钥解密，使用私钥加密，使用公钥解密）</p><p>平常使用excel ,word 等形式都是使用对称加密技术<img src="/2018/09/10/信息安全/TIM截图20180905215627.png" alt="TIM截图20180905215627"></p><ul><li><p>最突出的特点：加密和解密时 在输入密码时输入的内容一致</p></li><li><p>公钥是共享的 ，大家都能够获取到</p></li><li><p>而私钥是只有自己拥有的</p></li><li><p>甲的公钥加密后的文件，只能够甲的私钥打开</p></li><li><p>相对应的甲的私钥加密后的文件，也只有甲能够打开</p></li><li><p>缺点;加密速度慢</p><p>DES是对称密钥密码算法，它的加密密钥和解密密钥是相同的。RSA是非对称密钥密码算法，它使用不同的密钥分别用于加密和解密数据，还可以用于数字签名。对称密钥密码算法的效率要比非对称密钥密码算法高很多，使用与对文件等大量的数据进行加密。</p></li></ul><ul><li><p>信息摘要：</p><ul><li>​单项散列函数（单向Hash函数)  ，固定长度的散列值</li></ul></li><li><p>​       常用的消息摘要算法： MD5  ,SHA  两个算法的散列值分别为128和160</p></li><li><p>由于SHA通常采用的密钥长度较长，因此安全性高于MD5</p></li><li><p>数字签名：是一种防抵赖技术</p><ul><li>使用A的私钥进行加密的过程，称为数字签名过程</li><li>而使用A的公钥对A的私钥加密后的包的解密过程，称为数字签名的验证</li></ul><p>​数字信封：</p><p>​   对称加密技术用于加密文件的正文，而文件的密钥使用非对称加密技术</p></li></ul><p>（使用对方公钥对文件进行加密，而这个文件，只有对方私钥才能打开）</p><p><img src="/2018/09/10/信息安全/数字信封.png" alt="数字信封"></p><p><img src="/2018/09/10/信息安全/邮件加密.png" alt="邮件加密"></p><p>加密方式传输(对称加密和非对称加密)</p><p>邮件大小，比较大，要对正文使用对称加密技术，并生成随机密钥k ，就需要将随机密钥k 传送给B </p><p>将K通过非对称加密，使用接收方B的公钥进行加密 生成密钥K(数字信封技术)</p><p>接收方B通过自己的私钥解密得到随机密钥K,对邮件正文进行解密</p><p>发送者不可抵赖 涉及到数字签名，第三方无法篡改使用到了 （ 信息摘要）</p><p>对邮件使用信息摘要技术，并用数字签名技术进行加密（使用传送方A的私钥进行加密，这样对方接受到密文后，通过判断谁的公钥可以解密，可以获取到这是谁进行的加密） ,接收方通过数字签名的验证，获取到邮件的信息摘要，接收方B再对之前接收到的邮件进行信息摘要，判断两者是否是一致。</p><p>网络安全：     各个网络层次</p><p><img src="/2018/09/10/信息安全/网络安全.png" alt="网络安全"></p><p>原本的HTTP 协议走的是明文加密方式，易被截获</p><p>现在采用HTTP+SSL 协议的方式进行加密， –   https</p><p>科学院会屏蔽，军方会进行隔离</p><p>两种隧道协议，数据从隧道中传输，相对比较安全</p><p>防火墙：软件,软件+硬件 </p><p>IPSec ：与ip 协议有一些问题，针对IP包进行加密</p><p><img src="/2018/09/10/信息安全/网络威胁1.png" alt="网络威胁1"></p><p><img src="/2018/09/10/信息安全/网络威胁2.png" alt="网络威胁1"></p><p>防火墙    </p><ul><li><p>网络级（工作层次低，工作效率高）</p><ul><li>​包过滤</li><li>​状态监测（tcp-ip 连接信息）</li></ul></li><li><p>应用级（工作层次高，工作效率低）</p></li><li><ol><li><p>双穴主机</p></li><li><p>屏蔽主机</p></li><li><p>屏蔽子网（DHZ 非军事区，主要存放web服务器，邮件服务器）</p><p><img src="/2018/09/10/信息安全/防火墙.png" alt="防火墙"></p></li></ol><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安全属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;保密性： 最小授权原则，防暴露，信息加密 ，物理保密&lt;/li&gt;
&lt;li&gt;完整性  ：安全协议，验证码 ，密码校验，数字签名 ，公证&lt;/li&gt;
&lt;li&gt;可用性：综合保障（ip 过滤，业务流控制，路由选择控制，审计跟踪）&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="信息安全" scheme="http://yoursite.com/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2018/09/10/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/09/10/数据库/</id>
    <published>2018-09-10T03:15:16.000Z</published>
    <updated>2018-09-10T03:22:23.008Z</updated>
    
    <content type="html"><![CDATA[<p>事务回滚：</p><p>​    事务是<strong>数据库更新操作的基本单位</strong>，事务回滚是指将该<strong>事物已经完成的对数据库的更新操作撤销</strong>。事务对数据库的操作首先是在缓冲区进行的，由DBMS来实现定期的缓冲区数据写入硬盘数据库的操作，也可由显式的指令来完成，事务的撤销<strong>只涉及到数据库</strong>，不会改变事务中的变量值。</p><p>数据库系统： </p><p>​    <strong>数据库模式</strong>：</p><p>​        三级模式——两级映射属于一种层次性的架构设计（提高了可维护性）<img src="/2018/09/10/数据库/TIM截图20180909153400.png" alt="TIM截图20180909153400"></p><p>内模式:与物理数据库直接关联，主要是处理如何存储数据（按照什么格式去存储数据，如何优化存储）</p><p>所谓的物理数据库在计算机上表现是 文件</p><p>概念模式：数据库中的<strong>表</strong></p><p>外模式：数据库中的<strong>视图</strong></p><p><img src="/2018/09/10/数据库/TIM截图20180909154309.png" alt="TIM截图20180909154309"></p><p>​    <strong>ER模型</strong></p><p><img src="/2018/09/10/数据库/TIM截图20180909155022.png" alt="TIM截图20180909155022"></p><p>ER模型：    </p><p>​    一个实体转换成一个关系模式</p><p>​    1:1    1：n   m:n 练习</p><p>三个以上实体间的一个多元练习</p><p>​    <strong>关系代数和元组演算</strong></p><p>​      关系代数： 并  交  差   笛卡尔积    投影   选择  联接    <img src="/2018/09/10/数据库/TIM截图20180909163706.png" alt="TIM截图20180909163723"></p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909163723.png" alt="TIM截图20180909163723"></p><p><img src="/2018/09/10/数据库/TIM截图20180909163843.png" alt="TIM截图20180909163843"></p><p>​    <strong>规范化理论</strong>——函数依赖</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909165146.png" alt="TIM截图20180909165146"></p><p>函数的依赖 可以参考 f(x) = x^2  </p><p>x 能够唯一的确定y  但是 y 不能够唯一确定x</p><p>部分函数依赖：</p><p>​    如  学号，课程号  能够唯一确定  姓名    但 学号也能够直接确定姓名</p><p>传递函数依赖：</p><p>​    A  能够唯一确定B   B能够唯一确定C</p><p>但是B不能够唯一确定A,如果这样 AB之间就是等价  就不存在传递依赖</p><p>​    规范化理论的价值和用途：</p><p>​    非规范化的关系模式，可能存在的问题： 数据冗余，更新异常，插入异常，删除异常</p><p>​    </p><p>​    </p><table><thead><tr><th>键</th><th>内容</th><th></th></tr></thead><tbody><tr><td>超键</td><td>能够唯一标识元组（可以是属性的组合或单个属性）</td><td>要求低</td></tr><tr><td><strong>候选键</strong></td><td>唯一标识元组</td><td>超键和候选键区别是 超键可能存在冗余属性，消除了多于属性就是候选键</td></tr><tr><td></td><td></td><td>主键和候选键之间的区别主键只有一个，候选键可以有多个（任选一个）</td></tr><tr><td></td><td></td><td>其他关系的主键</td></tr></tbody></table><p>重点：——求候选键</p><p>​    <img src="/2018/09/10/数据库/TIM截图20180909171849.png" alt="TIM截图20180909171849"></p><p>将关系模式的函数依赖关系用 有向图的方式 表示</p><p>找入度为 0 的属性，并以该属性集合未起点，尝试遍历有向图，若能正常遍历图中所有结点，则该属性集即为关系模式的候选键</p><p>若入度为0的属性集不能遍历图中所有结点，则需要尝试的将一些中间结点（既有入度，又有出度的结点）并入入度为0的属性集中，直至该集合能遍历所有结点，集合候选键</p><p>​    <strong>范式</strong>：越往上越规范，但相对的数据的力度减小，一般到第三范式</p><p>​        </p><table><thead><tr><th>范式名称</th><th>内容</th><th>详细</th><th>示例</th></tr></thead><tbody><tr><td>1NF</td><td>属性值都是不可分的原子值</td><td>第一范式：在关系模型R中，当且仅当所有域只包含原子值，即每个分量都是不可再分的数据项，则称R是第一范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204933.png" alt="TIM截图20180909204933"></td></tr><tr><td>2NF</td><td>消除非主属性对候选键的部分依赖（部分依赖一般都是组合键）</td><td>当且仅当R是第一范式，且每一个非主属性完全依赖主键（不存在部分依赖）时，则称为R 是第二范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204945.png" alt="TIM截图20180909204945"></td></tr><tr><td>3NF</td><td>消除非主属性对候选键的传递依赖</td><td>当且仅当R是第一范式，且E中没有非主属性传递依赖于码时，则称R是第三范式</td><td><img src="/2018/09/10/数据库/TIM截图20180909204957.png" alt="TIM截图20180909204957"></td></tr><tr><td>BCNF</td><td>消除主属性对候选键的传递依赖</td><td>BC范式，设R是一个关系模式，F是它的依赖集，R属于BC范式当且仅当F中每个依赖的决定因素必定包含R的某个候选码</td><td><img src="/2018/09/10/数据库/TIM截图20180909205008.png" alt="TIM截图20180909204957"></td></tr></tbody></table><p>​    模式分解：</p><p>​     保持函数依赖分解：设数据库模式P={R1,R2,R3……Rk}是关系模式R的一个分解，F是R上的函数的依赖集，P中每个模式Ri上的FD集时Fi 。如果{F1,F2,……FK} 与F是等价的（相互逻辑蕴涵），那么称分解P保持FD</p><p>​    无损分解：有损指不能还原，无损指可以还原</p><p>​    无损联接分解：指将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式</p><p>​    </p><p>​    <strong>并发控制</strong></p><p>​    <strong>数据库完整性约束</strong></p><p>​    <strong>分布式数据库</strong></p><p>​    <strong>数据仓库与数据挖掘</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事务回滚：&lt;/p&gt;
&lt;p&gt;​    事务是&lt;strong&gt;数据库更新操作的基本单位&lt;/strong&gt;，事务回滚是指将该&lt;strong&gt;事物已经完成的对数据库的更新操作撤销&lt;/strong&gt;。事务对数据库的操作首先是在缓冲区进行的，由DBMS来实现定期的缓冲区数据写入硬盘数据
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>程序语言</title>
    <link href="http://yoursite.com/2018/09/10/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2018/09/10/程序语言/</id>
    <published>2018-09-10T03:08:33.000Z</published>
    <updated>2018-09-10T03:10:04.754Z</updated>
    
    <content type="html"><![CDATA[<p>编译原理：</p><p>​    程序错误分为语法错误和语义错误（逻辑错误）</p><p>语法错误是语句形式上的错误，语义错误是含以上的错误（逻辑错误）</p><p>在高级程序设计语言中，语句用于描述程序中的运算步骤，控制结构以及数据传输</p><p> 程序设计语言的语法是语言的外观，给出语言的语法意味着给出语句，声明和其他语言结构的书写规则。</p><p>语义则表示不同的语法结构的含义。在程序语言的手册中，语言的描述都是围绕着语法结构展开的。通常先给出各种语句结构的语法，然后给出对应该结构的语义以描述内在含义。语用是关于程序与使用者之间的<code>关系。</code></p><p>逻辑式语言是一类以形式逻辑为基础的语言。</p><p>函数式语言以补演算为基础</p><p>命令式原因是基于动作的语言，在这种语言中，计算被看成是动作的序列。</p><p>因此通过指明一系列可执行的运算及运算的次序来描述计算过程是命令式语言的特点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译原理：&lt;/p&gt;
&lt;p&gt;​    程序错误分为语法错误和语义错误（逻辑错误）&lt;/p&gt;
&lt;p&gt;语法错误是语句形式上的错误，语义错误是含以上的错误（逻辑错误）&lt;/p&gt;
&lt;p&gt;在高级程序设计语言中，语句用于描述程序中的运算步骤，控制结构以及数据传输&lt;/p&gt;
&lt;p&gt; 程序设计语言
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="程序语言" scheme="http://yoursite.com/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="http://yoursite.com/2018/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/10/计算机组成原理/</id>
    <published>2018-09-10T03:01:35.000Z</published>
    <updated>2018-09-10T03:31:05.107Z</updated>
    
    <content type="html"><![CDATA[<p>6分左右</p><ol><li><p>​    <strong>数据的表示</strong>    </p><p>R —— 十进制的转换</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907145356.png" alt="TIM截图20180907145356"></p><p>十进制 —— R进制 使用短除法</p><p>​    </p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907145719.png" alt="TIM截图20180907145719"></p><p>原码反码补码移码</p><p>将一个数转化为二进制，一个字节存储8bit,最高位为符号位 正数的符号位 0 负数的符号位为1</p></li></ol><table><thead><tr><th></th><th>数值1</th><th>数值 -1</th><th>1-1</th></tr></thead><tbody><tr><td>原码</td><td>0000     0001（正数符号位为0）</td><td>1000  0001（对于负数而言，符号位为1）</td><td>1000  0010（-2）</td></tr><tr><td>反码(正数的原码与反码一致)</td><td>0000     0001（正数与原码一致)</td><td>1111    1110 （负数符号位不动，所有的位置按位取反）</td><td>1111   1111（符号位为1，后取反可以得到是0即求得的时  -0）</td></tr><tr><td>补码（正数的原码与补码一致)</td><td>0000  0001（正数的原码与补码一致)</td><td>1111  1111 （符号位不变，反码+1）</td><td>0000   0000（ 即  0）</td></tr><tr><td>移码（一般用于浮点运算的阶码，在补码的基础上，对补码进行取反）</td><td>1000  0001</td><td>0111  1111</td><td>1000  0000（即0）</td></tr></tbody></table><p>数值表示范围</p><table><thead><tr><th></th><th>整数</th></tr></thead><tbody><tr><td></td><td>-（2^n-1   -1）~  2^n-1   -1   (  -127 - 127)</td></tr><tr><td></td><td>-（2^n-1   -1）~  2^n-1   -1    (  -127 - 127)</td></tr><tr><td></td><td>-2^n-1   ~  2^n-1   -1     (-128  - 127 )</td></tr></tbody></table><p>浮点数的表示</p><p>​    N = M * R^e</p><p>M表示尾数， e 为指数 ，R 为基数</p><p>运算过程： 对阶   —— 尾数运算 —— 结果格式化</p><p>2    <strong>计算机结构</strong></p><p>​    三大件：cpu +主存储器 +IO设备</p><p>​    cpu = 运算器 + 控制器</p><p>​    主机 = 主存储器 + cpu</p><p>运算器： 算数逻辑单元ALU</p><p>​        累加寄存器AC(通用寄存器，需要运算的一些值)</p><p>​        数据缓冲寄存器DR（当我们对内存进行读写操作时，存储数据）</p><p>​        状态条件寄存器PSW（存储在运算过程中的状态标志位）</p><p>控制器：程序计数器PC</p><p>​          指令寄存器IR</p><p>​         指令译码器</p><p>​         时序部件</p><p> 3   <strong>Flynn 分类法</strong>（对计算机的分类–四大类）</p><p>分类标准： 指令流+数据流</p><p>S  ——  single</p><p>M  —— mulity</p><p>​    </p><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>单指令流单数据流（SISD）</td><td>控制部分：一个    处理器：一个   主存模块：一个</td><td></td><td>单处理器系统</td></tr><tr><td>单指令流多数据流（SIMD）</td><td>控制部分：一个  处理器：多个 主存模块：多个</td><td>各处理器以异步的形式执行同一条指令</td><td>并行处理机阵列处理机超级向量处理机</td></tr><tr><td>多指令流单数据流（MISD）</td><td>控制部分：多个   处理器：一个  主存模块：多个</td><td>被证明不可能，至少是不实际的</td><td>目前没有，有文献称流水线计算机为此类</td></tr><tr><td>多指令流多数据流（MIMD）</td><td>控制部分：多个  处理器：多个  主存模块：多个</td><td>能够实现作业，任务，指令等各级全面并行</td><td>多处理系统    多计算机</td></tr></tbody></table><p> 4  <strong>CISC 和RISC</strong>  （计算机的指令集）</p><p>主要是考察两者的特点</p><p>​    </p><table><thead><tr><th>指令系统类型</th><th>指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC(复杂)</td><td>数量多，使用频率差别大（由于这个指令系统会根据需要设计所需的指令，在这个指令系统中简单的指令和复杂的指令的使用程度不同），可变长格式（即二进制格式）</td><td>支持多种</td><td>微程序控制技术（微码）</td><td>研制周期长</td></tr><tr><td>RISC（精简）</td><td>数量少，使用频率接近，定长格式，大部分为单周期指令，操作寄存器（寄存器的存取速度快），只有load/store 操作内存</td><td>支持方式少</td><td>增加了通用寄存器，硬布线逻辑控制为主（采用了硬件设备，硬件设备的速度快），适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><p>5  <strong>流水线技术</strong>（计算）</p><p>​    概念：    流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理时限技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165007.png" alt="TIM截图20180907165007"></p><p>流水线吞吐率计算：单位时间内流水线所完成的任务数量或输出的结果数量。</p><p>流水线的加速比：不使用流水线的时间与使用流水线的时间之比</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165255.png" alt="TIM截图20180907165421"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907165421.png" alt="TIM截图20180907165421"></p><p>​    </p><p>流水线的效率：</p><p>​    流水线的效率指流水线的设备利用率。在时空图上，流水线的效率定义为n个任务占用的时空取与k个流水段总的时空区之比</p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907170351.png" alt="TIM截图20180907170351"></p><ol><li><p>​        <strong>存储系统</strong>（概念和计算）**</p><ol><li><p>存储的结构</p></li><li><p>层次化存储结构</p><p>速度快         CPU             寄存器（存在于cpu中运算器和控制器中存在着寄存器，容量小，速度快）</p><p>​            Cache（高速缓存寄存器）                按照内存存取</p><p>​            内存（主存）</p><p>速度慢        外存（辅存）            硬盘  光盘  u盘等</p><p>容量小，速度快的考虑： 基于性价比的考虑</p></li></ol><p>cpu ——内存    </p><ol><li><p>cache：</p><p>工作于内存和cpu 之间，除了寄存器之外，cache 速度最爱</p><p>功能： 提高cpu数据输入输出的速率，突破了冯诺依曼瓶颈，即cpu与存储系统间数据传送带宽限制</p><p>在计算机的存储系统体系中，cache是访问速度最快的层次</p><p>使用cache改善系统性能的依据是程序的局部性原理</p><p>​</p></li><li><p>内存<img src="/2018/09/10/计算机组成原理/TIM截图20180907173200.png" alt="TIM截图20180907173200"></p></li></ol><p><img src="/2018/09/10/计算机组成原理/TIM截图20180907173504.png" alt="TIM截图20180907173504"></p><p>局部性原理：</p><p>​    时间局部性</p><p>​    空间局部性</p><p>​    工作集理论：工作集是进程运行时被频繁访问的页面集合</p><p>主存： 分类</p><p>​    随机存取存储器（内存）：DRAM (Dynamic RAM  ,动态RAM)      SRAM   (Static   RAM,静态)-SDRAM</p><p>​    在断电之后，数据不存在</p><p>​    只读存储器:MROM （Mask   ROM,掩护式ROM）   PROM(Programmable  ROM  一次可编程 ROM)    EPROM（Erasable PROM  可擦除的PROM）  闪速存储器（flash   memory,闪存）</p><p>​    在断电之后，数据仍然存在</p><p>磁盘结构与参数：</p><p>​    磁盘运作的原理：</p><p>​    磁盘环型盘片，其上涂有特殊材质的盘片</p><p>​    磁盘使用盘片来保存数据 读取数据为磁头</p><p>​    存取时间 = 寻道时间 + 等待时间（平均定位时间+转动延迟）【取得是平均，最好的情况不需要移动，最坏的情况需要旋转一圈，可以通过它来获取到旋转一圈所需要的时间】</p><p>​    寻道时间指磁头移动到磁道多需要的时间(因为可能是多张磁盘，所以要等待磁头移动到这个磁道，多个同心圆就是磁道)</p><p>​    等待时间为等待读写的扇区转到磁头下方所用时间（内个磁道都分有多个扇区，存取数据都是在扇区内进行的，如果需要数据写入的扇区不在磁头现在所在 的位置那么就要等待磁头移动到所需的扇区）</p></li></ol><p>​    <strong>总线系统</strong>（概念，总线的分类）</p><p>​     根据总线所处的<strong>位置不同</strong>，总线分为：</p><p>​       内部总线 （微机内部的各个外围的芯片与处理器之间的总线）芯片级</p><p>​      系统总线 （数据总线，地址总线  控制总线） 微机中各个插件版与 系统版之间的总线（插件版）</p><p>​            数据总线： 数据的传输（总线的宽度32，一个周期内可以传送的数据为32bit）</p><p>​            地址总线： 32位代表的地址空间2^32(4G)</p><p>​            控制总线：发送响应的控制信号</p><pre><code>外部总线 （微机和外部设备的总线）</code></pre><p>​ <strong>可靠性</strong>（串联，并联的可靠性以及串并联）</p><p>串联部件的可靠度  = 各部件的可靠度的乘积</p><p>并联部件的可靠度  = 1 -  各部件失效率的乘积</p><p>如果给出的系统由两个部件分别串联 然后冰凉，最好将并联的组成再与一个部件串联</p><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908084239.png" alt="TIM截图20180908084239"></p><p><img src="/2018/09/10/计算机组成原理/TIM截图20180908084807.png" alt="TIM截图20180908084807"></p><p><strong>校验码</strong>（各个校验码的计算）</p><p>​    差错控制  —— CRC 和 海明校验码</p><p>​    检错和纠错</p><p>​    码矩</p><p>​        一个编码系统的码矩是整个编码系统中任意两个码字的最小距离</p><p>​    码矩和检错和纠错的关系</p><p>​    在一个码组中为了检测e个误码，要求最小码矩d 满足   d &gt;= e+1</p><p>​    在一个码组中为了纠正t个误码，要求最小码矩d满足     d &gt;= 2t+1</p><p>循环校验码 CRC (可以用来做检错，但是不能够进行纠错的一种校验码)</p><p>​    原理：<img src="/2018/09/10/计算机组成原理/TIM截图20180908091122.png" alt="TIM截图20180908091122"></p><p>海明校验码</p><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908092254.png" alt="TIM截图20180908092254"></p><p><strong>计算机硬件</strong></p><p>​    </p><table><thead><tr><th>寻址方式</th><th>特点</th></tr></thead><tbody><tr><td>立即寻址方式</td><td>操作数直接在指令中，速度快，灵活性差</td></tr><tr><td>直接寻址方式</td><td>指令中存放的是操作数的地址</td></tr><tr><td>间接寻址方式</td><td>指令总存放了一个地址，这个地址对应的内容时操作数的地址</td></tr><tr><td>寄存器寻址方式</td><td>寄存器存放操作数（速度比立即寻址方式低，比直接寻址方式快寄存器比内存的效率高）</td></tr><tr><td></td><td>寄存器内存存放的时操作数的地址</td></tr></tbody></table><p>​    <img src="/2018/09/10/计算机组成原理/TIM截图20180908174354.png" alt="TIM截图20180908174354"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;6分左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;​    &lt;strong&gt;数据的表示&lt;/strong&gt;    &lt;/p&gt;
&lt;p&gt;R —— 十进制的转换&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/10/计算机组成原理/TIM截图20180907145356.png&quot; alt
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机组成原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>项目管理</title>
    <link href="http://yoursite.com/2018/09/10/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/10/项目管理/</id>
    <published>2018-09-10T02:59:09.000Z</published>
    <updated>2018-09-10T03:13:07.377Z</updated>
    
    <content type="html"><![CDATA[<p>项目管理工具：</p><p>​     Gantt 图：表现了一个系统开发过程中各个活动的时间安排，也反映了各个活动的持续时间和软件开发的进度，但是不能反映各个活动之间的依赖关系。活动之间依赖关系要用工程网络图（活动图）来表现。<img src="/2018/09/10/项目管理/TIM截图20180907132749.png" alt="TIM截图20180907132749"></p><p>软件开发模型：</p><p>耦合度：</p><p>​    模块的耦合度表现了模块之间相互关联的程度，分为b级</p><p>​    耦合度低 ———————————————————————耦合度高</p><p>​    无直接耦合      数据耦合   标记耦合      控制耦合   公共耦合   内容耦合</p><p>内聚是一种指标，表示一个模块代码功能的集中程度</p><p>​    模块的内聚性表现了模块内部各个子成分功能的集中程度，分为6级</p><p>​    内聚性低————————————————————内聚性高</p><p>​        偶然内聚  逻辑内聚    时间内聚   通信内聚  顺序内聚  功能内聚</p><p>风险管理：</p><p>​    软件开发中的风险与高级管理人员的支持程度有关，与对系统需求理解的程度有噶UN</p><p>与开发资金的及时投入有关，但与最终用户无关，系统的最后部署与运行不属于开发过程。</p><p>Boehm 提出的十大风险：</p><p>​     开发人员短缺</p><p>​    不能实现的进度和预算</p><p>​    开发了错误的软件功能</p><p>​     开发了错误的用户接口</p><p>华而不实的输球</p><p>需求不断的变动</p><p>外部执行的任务不符合要求</p><p>外部提供的组件不符合要求</p><p>实时性不符合要求</p><p>超出了计算机科学发展的水平</p><p>web前端：</p><p>​    MVC   Model  view  controller  是一种架构模式，为那些需要为同样的数据提供多个视图的</p><p>应用程序而设计的，很好的体现了数据层与表现层的分离。</p><p>​    MVC 将应用程序分为三种对象模型</p><p>​    模型：应用问题域中包含的抽象领域知识</p><p>​    视图：将应用问题域中包含的抽象领域知识呈现给用户的方法，一个模型可以用于多个视图</p><p>​    控制器： 用户界面对用户输入的响应方式</p><p>软件测试：</p><p>​    测试人员在系统设计阶段介入，根据概要设计说明书开始制定测试计划：</p><p>测试过程要求用户参与，特别是提交阶段要求通过用户的验收测试，设计测试用例时不但要选择合理的输入数据作为测试用例，还要选择不合理的输入数据作为测试用例。</p><p>软件评审：    </p><p>​    软件评审是评审软件产品，不要涉及对软件生产者能力的评价</p><p>评审前要指定严格的评审计划，并严格遵守预计的日程安排</p><p>对评审中出现的问题要记录在案，不要过多地讨论解决方案，把问题留给软件生产者来解决</p><p>要限制参与者人数，并要求参加评审的人员在评审会之前仔细阅读文档，做好充分的准备。</p><p>软件的质量度量指标：</p><p>​     软件的正确性是指软件完成所需功能的程度，尽管这种程度与每千行代码的故障数有关，但不完全等同。</p><p>​    软件的完整性是指软件在安全方面抗攻击的能力。</p><p>​    软件可用性用来度量软件的 用户友好性</p><p>​    可用性测量：</p><p>​      学会操作软件所需体力智力</p><p>​    对系统的使用达到中等效率所需要的时间</p><p>​    当系统有一个中等效率的人使用时测量到的生产率增长值</p><p>​    用户对系统的主观评价</p><p>成本管理</p><p>各种开发成本估算模型通常采用经验公司，提供一个或者多个数学算法，将成本作为若干个变量的函数计算求得。</p><p>常用的估算模型；</p><table><thead><tr><th>开发模型</th><th>类型分类</th><th>内容</th></tr></thead><tbody><tr><td>IBM模型</td><td>静态单变量模型</td><td>利用已估算的特性（源代码函数）来估算各种资源的需求量</td></tr><tr><td>Putnam</td><td>动态多变量模型</td><td>它嘉定软件项目工作量的分布和Rayleigh曲线类似，并把项目的资源需求当做时间的函数。改模型为描述开发工作量和计划进度之间的关系定义了两个方程：1，软件方程，表明开发工作量和项目规模的三次幂成正比，与开发时间的四次方成反比 2 人力增加方程，表明工作量和开发时间三次幂成正比， Putnam模型一般应用于超过了20000 行代码行的项目</td></tr><tr><td>COCOMO</td><td></td><td>一种精确且易于适用的成本估算模型，它是由基本COCOMO模型，中级COCOMO模型和高级COCOMO模型组成的集合。基于COCOMO模型是静态单变量模型，用一个已经估算的源代码行数为自变量的经验函数来计算软件开发工作量和开发成本。中级COCOMO模型在基本模型在基本基本模型中已计算的软件开发工作量的基础上，在用涉及产品，硬件，人员，项目和项目的15个成本驱动因素来调整工作量的估算。高级COCOMO模型不但包括了中级COCOMO模型的所有特性，而且为上述15个因素在软件生存周期的不同阶段赋予了不同的权重。COCOMO模型是由Boehm 于1981年首次发表，后来又和同事定义了更加复杂的<strong>COCOMO II 模型</strong>，该模型反映了软件工程技术的近期变化，COCOMO模型非常适用于专用的，按照技术说明制作的软件项目。而COCOMO  II 更加实用与广泛汇集各种技术的软件项目，为商用软件，面向对象软件，通过螺旋型或进化型等开发模型制作的软件。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目管理工具：&lt;/p&gt;
&lt;p&gt;​     Gantt 图：表现了一个系统开发过程中各个活动的时间安排，也反映了各个活动的持续时间和软件开发的进度，但是不能反映各个活动之间的依赖关系。活动之间依赖关系要用工程网络图（活动图）来表现。&lt;img src=&quot;/2018/09/10/
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="项目管理" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/2018/09/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/09/10/计算机网络/</id>
    <published>2018-09-10T02:49:48.000Z</published>
    <updated>2018-09-10T03:23:53.603Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>层次</th><th>名称</th><th>主要功能</th><th>主要设备及协议</th></tr></thead><tbody><tr><td>1</td><td>物理层</td><td>进行二进制的传输（高电平低电平的传输）</td><td><strong>中继器</strong>（为了信号的传输不衰竭，每隔一段距离设置一个中继器） <strong>集线器</strong>（多端口的中继器）</td></tr><tr><td>2</td><td>数据链路层</td><td>传送以帧为单位的信息（信息单位，方便传输时的识别）</td><td><strong>网桥</strong>（连接两个同类型网络的设备） <strong>交换机</strong>  （多端口的网桥  连接多个设备）<strong>网卡</strong>  PPTP,L2TP,SLIP,PPP</td></tr><tr><td>3</td><td>网络层</td><td>分组传输和路由选择</td><td><strong>三层交换机</strong> <strong>路由器</strong> ARP （ip 转Mark    ）,RARP（Mark转ip）， IP， ICMP（因特网的控制协议 ，如 ping 命令） IGMP</td></tr><tr><td>4</td><td>传输层</td><td>端与端的连接（端口号）</td><td>TCP （可靠的，在通信时建立连接）,UDP（不可靠的，在通信时不建立连接）</td></tr><tr><td>5</td><td>会话层</td><td>建立，管理和终止会话</td><td>P0P3,SMTP（邮件传输协议）FTP,（文件传输协议）HTTP（超文本传输协议，用来传输网页）,Telnet,（远程登录）(前 基于tcp 协议),DHCP,（局域网，用来做动态的ip分配）TFTP,（小文件传输协议）SNMP,（简单网络管理协议）DNS(域名解析)</td></tr><tr><td>6</td><td>表示层</td><td>数据的格式与表达 ，加密，压缩</td><td></td></tr><tr><td>7</td><td>应用层</td><td>实现具体的应用功能</td></tr></tbody></table><p>局域网只存在于 物理层和 数据链路层</p><p>​    最典型的的代表是  交换机</p><p>当网络无法访问外部站点时，<strong>采用ping操作</strong>只能够判断用户与外部站点的连通性，无法判断故障处于校园网内还是校外，而<strong>使用netstat</strong>  用于显示与IP TCP  UIIP  和 ICMP 协议有关的统计数据，一般用于检验本机各个端口的网络连接情况，<strong>使用ARP</strong>  可以查看和修改本地计算机上的ARP 表项。ARP 命令对于查看ARP缓存和解决地址解析问题很有用，而使用tracert可以跟踪网络连接，<strong>Tracert(跟踪路由）是路由跟踪使用程序</strong>，<strong>用于确定IP数据报访问目标所采取的路径</strong>。通过该命令可以查看在哪段路由出现联通问题。</p><p> 网络技术标准和协议</p><p>​    <img src="/2018/09/10/计算机网络/网络规划与设计.png" alt="网络规划与设计"></p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>TCP/IP协议</td><td>internet，可扩展，可靠，应用最广，牺牲速度和效率</td></tr><tr><td>IPX/SPX协议</td><td>NOVELL，路由，大型企业网</td></tr><tr><td>NETBEUI  协议</td><td>IBM ,非路由，快速</td></tr></tbody></table><p><img src="/2018/09/10/计算机网络/TIM截图20180905135958.png" alt="TIM截图20180905135958"></p><p>DHCP协议：局域网中有DHCP服务器，用来动态的分配ip地址</p><ol><li>客户机  向DHCp服务器中请求 ip地址</li><li>是一种客户机/服务器模型</li><li>租约默认为八天</li><li>当租约过半时客户机会向 DHCP服务器申请续约</li><li>当租约超过87.5%，如果还未和当初提供ip的服务器联系上，就会开始联系其他的DHCP服务器</li><li>固定分配，动态分配 自动分配</li><li>169.254.x.x 和0.0.0.0 是初始的，未分配的ip 地址</li></ol><p>DNS服务器 ：域名服务器</p><ol><li><ul><li><p>通过域名访问站点,而识别计算机的是ip地址，将域名转换成ip地址</p></li><li><p>dns 所做的就是这样的工作</p></li><li><p>两种基本的查询域名方式</p><ol><li><p>递归查询：服务器必要回答目标ip与域名之间的映射关系</p></li><li><p>迭代查询：服务器收到一次迭代查询回复一次结果，这个结果不一定是目标ip 与域名之间的映射关系，也可以是其他dns服务器的地址</p><p><strong>主机向本地域名服务器的查询是递归查询</strong></p><p><strong>本地域名服务器向根域名服务器的查询通常采用迭代查询</strong></p><p>计算机网络的分类： 拓扑结构</p><p>按照分布范围分为  局域网 （LAN） 城域网 (MAN)   广域网 (WAN)  因特网</p><p>按照拓扑结构分为： 总线型( 一条线上连接各个终端)   星型（缺点：单点故障，办公室中的局域网，中心是交换机）   环型（信息通过环型进行传送）</p></li><li><p>分层设计：</p><ol><li>接入层：向本地网段提供用户接入</li><li>汇聚层：网络访问策略控制，数据包处理，过滤，寻址</li><li>核心层：数据交换</li></ol></li><li><p>ip地址 （ipv4）</p><p>ABC（普通） D(组播)  E（保留）</p><p>A类地址： 包含主机数量2^24 -2  在四段的中 ，首个bit位是网络号</p><p>2 为： 全为0 （代表网络地址） 和 全为1 （网络中的（广播）地址）的地址</p><p>且只有前8位 表示地址空间    总共是0-127个  还包含特殊地址</p><p>B类地址：包含主机数量2^16-2  前两段为网络地址，后为主机地址</p><p>c类地址：包含主机数量2^8-2  即254台主机   ，前三段为网络地址</p></li><li><p>子网划分</p><ol><li><p>子网掩码</p><ol><li>将一个网络划分成多个子网（取部分主机号当子网号）</li><li>将多个网络合并成一个大的网络（取部分网络号当主机号）</li></ol></li><li><p>无分类编址（无类域间路由）</p><ol><li>ip地址  =  网络前缀 主机号</li></ol></li><li><p>特殊含义的ip地址</p><p>| IP             | 说明                          |<br>| ————– | ————————— |<br>| 127网段          | 回播地址                        |<br>| 网络号全0地址        | 当前子网中的主机                    |<br>| 全1地址           | 本地子网的广播                     |<br>| 主机号全1地址        | 特定子网的广播                     |<br>| 10.0.0.0/8     | 10.0.0.1到10.255.255.254     |<br>| 172.16.0.0/12  | 172.16.0.1到172.31.255.254   |<br>| 192.168.0.0/16 | 192.168.0.1到192.168.255.254 |<br>| 169.254.0.0    | 保留地址，用于DHCP失效（Win）          |<br>| 0.0.0.0        | 保留地址，用于DHCPshixiao(Linux)   |</p></li></ol></li><li><p>无线网</p><ol><li>无线网的优势：<ol><li>移动性</li><li>灵活性</li><li>成本低</li><li>容易扩充</li></ol></li><li>无线网分类：<ol><li>无线局域网 wlan  802.11  wi-fi</li><li>无线城域网  wman    802.16  WiMax</li><li>无线广域网   wwan   3G/4G</li><li>无线个人网（wpan  802.15 Bluetooth)</li></ol></li><li>网络接入技术<ol><li>有线接入</li><li>无线接入</li><li>3G/4G</li></ol></li></ol><p><img src="/2018/09/10/计算机网络/网络接入技术.png" alt="网络接入技术"></p></li></ol></li></ul></li></ol><p>对称（）非对称指的是 上传与下载的线路带宽，给予上传的少下载的多</p><p>WCDMA 是使用国家和地区最多的，标准完整且成熟 稳定的</p><p>CDMA2000 和  TD-SCDMA  （CDMA2000 电信使用较多  TD 移动推动过）</p><p>CDMA: (Code  Division Multiple  Accesst CDMA) 码分多址技术比较适合现代移动通信网的大容量，高质量，综合业务，软切换等要求。</p><p>CDMA  似乎在数字技术的分支– 扩频通信技术上发展起来的一种崭新而成熟的无线通信技术，CDMA技术的原理是基于扩频技术，即需传送的具有一定信号带库信息数据，用一个带宽大于信号带宽的高速伪随机码进行调制，是原数据洗好的带宽被扩展，再径载波调制并发送出去。接收端使用完全相同的伪随机码，与接收的带宽信号作相关处理，把宽带信号换成原信息数据的窄带信号即解扩，以实现信息通信。</p><p>CDMA是国内的主要移动通信技术。</p><p>改标准是由中国大陆独自制定的3G标准 TD-SCDMA</p><p>网络安全</p><p>​    防火墙技术，访问控制技术和入侵检测技术都属于网络安全控制技术</p><p>差错控制技术是一种用来保证数据传输质量的技术，不属于网络安全控制技术。</p><p>冲击波 病毒是一种弄蠕虫类型的病毒，在进行网络传播时，利用了windows 操作系统的RPC漏洞。</p><p>4G 时代：  LTE 分为   </p><p>​    十分  ：TDD    由 TD-SCDMA 演化</p><p>​    平分： FDD 由  WCDMA 演化</p><p>IPV6:  是设计用于替代现行版本IP协议（IPV4) 的下一代ip协议</p><ol><li><p>IPv6 地址长度为128 位  地址空间增大了2^96 倍</p></li><li><p>灵活的ip 报文头部格式，使用了一系列固定格式的扩展头部取代了ipv4  中可变长度的选项字段，ipv6 中选项部分的出现方式也有所变化，使路由器可以简单路过选项，而不做任何处理，加快了豹纹的处理速度</p></li><li><p>ipv6 简化了报文头部个事，字段只有8个，加快报文转发，提高了吞吐量</p></li><li><p>提高了安全性，身份认证 和隐私权是ipv6 的关键特性</p></li><li><p>支持更多的服务类型</p></li><li><p>允许协议继续演变，增加新的功能，使之适应未来技术的发展</p><p>单播地址：用于单个接口的标识符</p><p>任播地址：泛播地址，一组接口的标识符，ipv4 广播地址</p><p>组播地址，ipv6中的组播在功能上与ipv4 中的组播类似</p><p>网络安全：</p><p>​多个网络设备上的程序在短时间内同时向某个服务器产生大量的请求，导致该服务器不堪重负。典型的分布式拒绝服务攻击（DDos）</p></li></ol><p>多模光纤：</p><p>​    成本低，宽芯线，聚光好，耗散大，低效，用于低速度，短距离的通信</p><p>单模光纤：</p><p>​     成本高，窄芯线，需要激光源，耗散小，高校，用于高速度，长距离的通信</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;层次&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;主要功能&lt;/th&gt;
&lt;th&gt;主要设备及协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;物理层&lt;/td&gt;
&lt;td&gt;进行二进制的传输
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://yoursite.com/2018/09/10/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/09/10/软件工程/</id>
    <published>2018-09-10T02:48:33.000Z</published>
    <updated>2018-09-10T02:49:19.944Z</updated>
    
    <content type="html"><![CDATA[<p>软件能力成熟度模型（CMM）是目前国际上最流行，最实用的软件生产过程标准和软件企业成熟度的等级认真标准。改模型将软件能力成熟度自低到高一次划分为初始级，可重复级，已定义级，已管理级，优化级。</p><p>CMM是美国卡其内基——梅隆大学软件工行研究所与企业，政府合作的基础上开发的模型，主要用于评价软件企业的质量保证能力。</p><p>CMM为软件企业的过程能力提供了一个阶梯式的进化框架，将软件过程改进的进化步骤分为五个成熟度等级，每一个等级定义了一组过程能力目标，并描述了要达到这些目标应采取的实践活动，为不断改进过程奠定了循序渐进的基础，这个等级的层次关系：</p><p>​    初始级是起点，改等级的企业一般缺少有效的管理，项目进行过程中长放弃最初的规划，开发项目成效不稳定。而从可重复级开始，每个级别都设定了一组目标，且低级别目标的实现是实现高级别目标的基础。</p><p>​    <strong>可重复级</strong>要求企业建立基本的管理制度和规程，管理工作有章可循，初步实现开发过程标准化。<strong>定义级</strong>要求整个软件生命周期的管理和技术工作均已实现标准化，文档化，并建立完善的培训制度和专家评审制度，项目质量，进度和非要用均可以控制。在<strong>管理级</strong>，企业的软件过程和产品已经建立定量的质量目标，并通过一致的度量标准来指导软件过程，保证项目对生产率和质量进行度量，可预测过程和产品质量趋势。在<strong>优化级</strong>，企业可集中精力改进软件过程，并拥有防止出现缺陷，识别薄弱环节以及进行改进的手段。</p><p>统一过程UP 的基本特征时  用例驱动，以架构为中心的和受控的迭代式增量开发。一个UP 可以分为若干个周期，每个周期的开发过程被分为4个阶段。每个阶段可以进行若干次迭代</p><p>​    Up ：一个周期的开发过程划分为4个阶段</p><p>​    先启阶段（Inception）: 该阶段的主要意图是建立项目的范围和版本，确定业务实现的可能性和项目目标的稳定性，提交结果包括原始的项目需求和业务用例</p><p>​    精化阶段（Elaboration）:该阶段的主要意图是对问题域进行分析，建立系统的需求和架构，确定技术实现的可行性和系统架构的稳定性，提交结果包括系统架构及其相关文档，领域模型，修改后的业务用例和整个项目的开发计划。</p><p>构建阶段： 主要意图是增量式开发一个可以交付用户的软件产品</p><p>提交阶段：主要是将软件产品提交用户。</p><p>软件的可扩充性指的是软件的体系结构，数据设计和过程设计的可扩充程度，可扩充性影响着软件的灵活性和可移植性。软件可靠性指软件按照设计要求，在规定时间和条件下不出故障，可持续运行的程度，可靠性取决于软件的一致性，安全性，容错性和准确性等，</p><p>软件复用性指的是软件和软件的部件能够被再次用于其他应用中的程度，软件复用性取决于其模块独立性，通用性和数据共享性等。软件可移植性指的是将软件系统从一个计算机系统或者环境移植到另一个计算机系统或者环境汇总运行时所需要工作量的大小，可移植性取决于系统中硬件设备的特征，软件系统和特点和开发环境，系统分析与设计中关于通用性，软件独立性和可扩充性的考虑。</p><p>最初的ISO模型中，包括8个基本特性，而在1991 年发布的ISO/IEC  9126模型中，基本特性减少到6个</p><p>​    功能性，可靠性，易使用性，效率，可维护性和可移植性。</p><p>其中可靠性包括三个子特性： 成熟性，容错性，易恢复性。</p><p>安全性是功能性的子特性</p><p>适应性是可移植性的子特性。</p><p>软件文档：</p><p>​    </p><table><thead><tr><th>文档形式</th><th>内容</th><th></th></tr></thead><tbody><tr><td></td><td>主要说明系统的功能分配，模块规划，程序的总体结构，io以及接口设计，运行设计，数据结构设计和错误处理设计等</td><td></td></tr><tr><td></td><td>着重描述每个模块是如何实现的</td><td></td></tr><tr><td></td><td>帮助用户了解软件的使用，需要描述软件的功能，性能和用户界面</td><td></td></tr><tr><td>用户需求说明书</td><td>开发人员和用户通过充分沟通后对软件需求的共同理解，主要说明软件的功能，性能和运行环境等内容</td></tr></tbody></table><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件能力成熟度模型（CMM）是目前国际上最流行，最实用的软件生产过程标准和软件企业成熟度的等级认真标准。改模型将软件能力成熟度自低到高一次划分为初始级，可重复级，已定义级，已管理级，优化级。&lt;/p&gt;
&lt;p&gt;CMM是美国卡其内基——梅隆大学软件工行研究所与企业，政府合作的基础
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="软件工程" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多媒体</title>
    <link href="http://yoursite.com/2018/09/10/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>http://yoursite.com/2018/09/10/多媒体/</id>
    <published>2018-09-10T02:42:34.000Z</published>
    <updated>2018-09-10T02:46:56.541Z</updated>
    
    <content type="html"><![CDATA[<p>1-3分左右</p><ol><li><p>多媒体基础：</p><ol><li><p>多媒体（Mutilmedia）是融合两种或两种以上媒体的一种人机交互式信息交流和传播媒体，使用的媒体包括文字，图形，图像，声音，动画和电视图像等。要把一台普通的计算机变成多媒体计算机要研究的关键技术是：视频音频信号获取技术，多媒体数据压缩编码和解码技术，视频音频数据的实时处理技术和视频音频数据的输出技术。</p></li><li><p>多媒体基数概念</p><ol><li><p>音频</p><ol><li><p>声音的带宽</p><ol><li><p>人耳：    20-20KHz</p></li><li><p>说话： 300-3400Hz</p></li><li><p>乐器：20-20KHz</p></li><li><p>超声波：超过20KHz</p></li><li><p>次声波：低于20Hz</p><p>声音的信号是模拟信号，计算机能够处理的信号是数字信号</p><p>所以需要进行采样</p></li></ol></li><li><p>采样：</p><ol><li>采样频率：采样频率越高，采点越多，声音的还原度越高</li><li>采样精度：</li><li>采样频率应为声音最高频率2倍</li><li>​</li><li><img src="/2018/09/10/多媒体/TIM截图20180906111425.png" alt="TIM截图20180906111425"></li><li>数据传输率（b/s） =采样频率 （Hz）X  量化位数（b）x 声道数</li><li>声音信号是一种模拟信号，计算机要对其进行处理，必须要将其转换为数字声音信号即用二进制数字的编码形式来表示声音。最基本的声音信号数字化方法是  取样——量化法</li><li>采样：把时间连续的模拟信号转换成时间爱你离散，幅度连续的信号。在某些特定的时刻获取声音信号幅值叫做采样。由这些特定时刻采样得到的信号称为离散时问信号。一般都是每隔相等的一小段时间采样一次，其时间间隔称为取样周期，其倒数称为采样频率。采样定理是选择采样频率的理论依据，为了不产生失真，采样频率不应低于声音信号最高频率的两本。因此，语言信号的采样频率一般为8KHz,音乐信号的采样频率应该在40KHz以上，采样频率越高，可回复的声音信号分量越丰富，其声音的保真度越好。</li><li>量化：把在幅度上连续取值（模拟量）的每一个样本转换成离散值（数字量），因此量化过程有时也称为A/D （模数转换），量化后的样本是用若干位二进制（bit）来表示的，位数的多少反映了度量声音波形幅度的精度，称为量化精度，也称为量化分辨率。如，每个声音样本若用16位（2个字节）表示，则声音样本的取值范围是  0~65536   ，精度是  1/65536 ,若只用8位（1个字节）表示，则样本的取值范围 0~255，精度为1/256。量化精度越高声音的质量越好，选用的存储空间越多。</li><li>编码：经过采样和量化处理后的声音信号已经是数字形式了，为了便于计算机存储，处理和传输，必须按照约定的要求进行数据压缩和编码，即选择一种或者集中方式对其进行数据压缩，以减少数据量，再按照某种规定的格式将数据组织成为文件。</li></ol></li></ol></li><li><p>图像</p><p>(亮度，色调，色饱和度三个物理量来描述，并称为色彩三要素)</p><ol><li><p>亮度：画面的明亮程度，亮度是描述光作用域人眼时引起的明暗程度感觉，是指色彩明暗深浅程度</p></li><li><p>色调（红，绿）：指颜色的类别，如红色，绿色，蓝色等不同颜色就是指色调</p></li><li><p>饱和度：色饱和度指某一颜色的深浅程度（或浓度）</p></li><li><p>彩色空间：</p><ol><li><p>RGB(电脑显示器，彩色显示器   三原色，red  green  blue，白色是其他颜色经过配合出来的)</p></li><li><p>YUV（电视，兼容）</p></li><li><p>CMY(CMYK)印刷领域 c  cyan  m  magenta   y yellw  </p><p>​    光的三原色是叠加，印刷是相减的原理</p><p>三种中，黑色难调且贵，后又使用 K   即加入黑色原料</p></li><li><p>HSV（HSB)</p></li></ol></li></ol></li><li><p>媒体的种类：</p><p>| 名称             | 内容                                       |<br>| ————– | —————————————- |<br>| 感觉 媒体          | 人们接触信息的感觉形式，如视，听,触觉，嗅觉，味觉等               |<br>|                | 信息的表示形式，如文字，图形，图像，动画，音频和视频等              |<br>| <strong>显示媒体（表现媒体）</strong> | 表现和获取信息的物理设备，如输入显示媒体键盘，鼠标，麦克风等，输出显示媒体显示器，打印机和音箱等 |<br>|                | 存储数据的物理设备，如磁盘，光盘，内存等                     |<br>|                | 传输数据的物理载体，如电缆，光缆和交换设备等                   |</p><p>​</p></li></ol></li><li><p>多媒体相关计算问题</p><ol><li><p>图像容量计算</p><ol><li><p>知道像素，位数     </p><ol><li><p>每个像素为16位，图像为640x480，求容量</p><p>16位表示每个像素点使用多少个bit位存储像素点</p><p>占据的字节：16/8 = 2 个字节</p><p>640<em>480</em>16/8 =614,400B</p></li></ol></li><li><p>知道像素，色数</p><ol><li><p>640x480像素，256色的图像，求容量</p><p>色数： 2^k  = 色数 ，K 代表着位数，颜色信息需要使用8个bit位来存储</p><p>8个bit 位就是一个字节 Byte</p><p>640x480xlog2(256)/8=307,200B</p></li></ol></li></ol></li><li><p>音频容量计算</p><p>容量= 采样频率   x   量化   /   采样位数(位)  x   声道数 / 8</p></li><li><p>视频容量计算</p><p>容量 =  每帧图像容量（Byte)  X   每秒帧数 X  时间 + 音频容量 X  时间</p><p><img src="/2018/09/10/多媒体/TIM截图20180906154943.png" alt="TIM截图20180906154943"></p></li></ol></li><li><p>常见多媒体标准</p><p><img src="/2018/09/10/多媒体/TIM截图20180906155430.png" alt="TIM截图20180906155430"></p></li><li><p>数据压缩技术</p><p>有损压缩和无损压缩<img src="/2018/09/10/多媒体/TIM截图20180906163704.png" alt="TIM截图20180906163704"></p><p>​    <img src="/2018/09/10/多媒体/TIM截图20180908180553.png" alt="TIM截图20180908180547"></p><p>​</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1-3分左右&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多媒体基础：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多媒体（Mutilmedia）是融合两种或两种以上媒体的一种人机交互式信息交流和传播媒体，使用的媒体包括文字，图形，图像，声音，动画和电视图像等。要把一台普通的计算机变成多媒体计算机
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多媒体" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>法律法规</title>
    <link href="http://yoursite.com/2018/09/10/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    <id>http://yoursite.com/2018/09/10/法律法规/</id>
    <published>2018-09-10T02:37:56.000Z</published>
    <updated>2018-09-10T02:41:33.415Z</updated>
    
    <content type="html"><![CDATA[<p>涉及到的法律法规角度：</p><p>​    著作权法</p><p>​    计算机软件保护条例</p><p>​        商标法</p><p>​    专利法</p><p>考点——保护期限</p><p>​        著作权：</p><table><thead><tr><th>客体类型</th><th>权力类型</th><th>保护期限</th></tr></thead><tbody><tr><td>公民作品</td><td>署名权，修改权，保护作品完整权</td><td>没有限制</td></tr><tr><td></td><td>发表权，使用权 获得报酬权</td><td>作者终生及其死亡后的50年（第50年的12月31号）</td></tr><tr><td>单位作品</td><td>发表权，使用权和获得报酬权</td><td>50年（首次发表后的第50年的12月31日）若期间未发表，不保护</td></tr><tr><td>公民软件产品</td><td>署名权，修改权</td><td>没有限制</td></tr><tr><td>公民软件产品</td><td>发表权，复制权，发行权，出租权，信息网络传播权，翻译权，使用许可权，获得报酬权，转让权</td><td>作者终生及死后的50年（第50年12月31日）,合作开发，以最后死亡作者为准</td></tr><tr><td>单位软件产品</td><td>发表权，复制权，发行权，出租权，信息网络传播权，翻译权，使用许可权，获得报酬权，转让权</td><td>50年（首次发表后的第50年的12月31日）,若期间未发表，不保护</td></tr><tr><td>注册商标</td><td></td><td>有效期10年（若注册人死亡或倒闭1年后，未转移则可注销，期满后6个月内必须续注）</td></tr><tr><td>发明专利权</td><td></td><td>保护期2为20年，从申请日开始</td></tr><tr><td>使用新型和外观设计专利权</td><td></td><td>保护期为10年，从申请日开始</td></tr><tr><td>商业机密</td><td></td><td>不确定，公开后公众可以使用</td></tr></tbody></table><p>​    知识产权人确定</p><p><img src="/2018/09/10/法律法规/知识产.png" alt="知识产"></p><p>​        <img src="/2018/09/10/法律法规/T.png" alt="T">    </p><p>​    侵权判断</p><p>​       中国公民，法人或者其他组织的作品，不论是否发表，都享有著作权</p><p>​    开发软件所用的思想，处理过程，操作方法或者数学概念不受保护</p><p>​    著作权法不使用的情况：    </p><p>​       法律，法规，国家机关的决议，决定，命令和其他具有立法，行政，司法性质的文件，及其官方正式译文</p><p>​      时事新闻</p><p>​      历法，通用数表，通用表格和公式</p><p>​    <img src="/2018/09/10/法律法规/TIM8.png" alt="TIM8"></p><p>知识产权：    </p><ol><li><p>​    著作权及邻接权</p><p>​        邻接权： 保护了出版商的权利，保护著作权意外，和著作权相关的权利</p><ol><li>​专利权</li><li>​工业品外观设计权</li><li>​商标权</li><li>​地理标志权</li></ol><p>​     </p><ol><li>​集成电路布图设计权</li></ol></li></ol><p>标准化</p><p>​     </p><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>国际标准</td><td>ISO,IEC 等国际标准化组织</td></tr><tr><td>国家标准</td><td>GB-中国  ANSI-美国  BS-英国   JIS -日本</td></tr><tr><td></td><td>又称为地区标准，如PASC-太平洋地区标准会议  CEN-欧洲标准委员会，ASAC-亚洲标准咨询委员会， ARSO-非洲地区标准化组织</td></tr><tr><td></td><td>GJB-中国军用标准，MIT-S 美国军用标准 ，IEEE-美国电气电子工程师协会</td></tr><tr><td></td><td>国家的地方一级行政机构制定的标准</td></tr><tr><td></td><td></td></tr><tr><td>项目规范</td></tr></tbody></table><p>标准的编号</p><table><thead><tr><th>类型</th><th>编号内容</th></tr></thead><tbody><tr><td>国际，国外标准代号</td><td>标准代号+专业类号+顺序号+年代号</td></tr><tr><td></td><td>强制性标准代号为GB,推荐性标准代号为GB/T，指导性标准代号为GB/Z,实物标准代号为GSB</td></tr><tr><td></td><td>由汉语拼音大写字母组成如  电子行业为（SJ）</td></tr><tr><td></td><td>由DB加上省级行政区划代码的前两位</td></tr><tr><td>企业标准代号</td><td>由Q加上企业代号组成</td></tr></tbody></table><p>标准化法规定：国家标准，行业标准分为强制性标准和推荐标准。保障人体健康，人身，财产安全的标准和法律，行政法规规定强制执行的标准是强制性标准，其他标准是推荐性标准。</p><p>​    省，自治区，直辖市标准化行政主管部门制定的工业产品的安全，卫生要求的地方标准，在本行政区域内是强制性标准。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;涉及到的法律法规角度：&lt;/p&gt;
&lt;p&gt;​    著作权法&lt;/p&gt;
&lt;p&gt;​    计算机软件保护条例&lt;/p&gt;
&lt;p&gt;​        商标法&lt;/p&gt;
&lt;p&gt;​    专利法&lt;/p&gt;
&lt;p&gt;考点——保护期限&lt;/p&gt;
&lt;p&gt;​        著作权：&lt;/p&gt;
&lt;table&gt;
&lt;
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="法律法规" scheme="http://yoursite.com/tags/%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="http://yoursite.com/2018/09/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/09/10/操作系统/</id>
    <published>2018-09-10T02:29:01.000Z</published>
    <updated>2018-09-10T02:36:13.731Z</updated>
    
    <content type="html"><![CDATA[<p>5-7</p><p>​    操作系统：</p><p>​    管理系统的软硬件，数据资源</p><p>​    控制程序运行</p><p>​    人机之间的接口</p><p>​    应用软件与硬件之间的接口</p><p>包括：     进程管理  存储管理   文件管理  作业管理   设备管理</p><p>​    </p><table><thead><tr><th>进程管理</th><th>进程的状态  前趋图   PV操作   死锁问题</th></tr></thead><tbody><tr><td>存储管理</td><td>段页式存储     页面置换算法</td></tr><tr><td>文件管理</td><td>索引文件    位示图</td></tr><tr><td>作业管理</td><td></td></tr><tr><td>设备管理</td><td></td></tr><tr><td>微内核操作系统</td><td>虚设备与SPOOLING技术</td></tr></tbody></table><p><img src="/2018/09/10/操作系统/TIM截图20180908094850.png" alt="TIM截图20180908094850"></p><p>前驱图：<img src="/2018/09/10/操作系统/Users\123\Desktop\新建文件夹\TIM截图20180908095932.png" alt="TIM截图20180908095932"></p><p>PV操作——进程管理</p><p>​    临界资源：各个进程间需要互斥方式对其进行共享的资源如打印机，磁带机‘</p><p>​    临界区：每个进程中访问临界资源的那段代码称为临界区</p><p>​    信号量： 是一种特殊的变量</p><p><img src="/2018/09/10/操作系统/TIM截图20180908132701.png" alt="TIM截图20180908132701"></p><p>死锁问题：    </p><p>​    如果一个进程在等待一件不可能发生的事，则进程就死锁了</p><p>而如果一个或多个进程产生死锁，就会造成系统死锁</p><p>死锁的预防：打破死锁的四个条件</p><p>​    互斥+环路等待+不剥夺+保持和等待</p><p>死锁的避免：有序资源分配，银行家算法</p><p>银行家算法：分配资源的原则</p><p>​    当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程</p><p>​    进程可以分期请求资源，但请求的总数不能超过最大需求量</p><p>​    当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间内得到资源。<img src="/2018/09/10/操作系统/TIM截图20180908142258.png" alt="TIM截图20180908142258"></p><p>存取存储组织：</p><p>​    <img src="/2018/09/10/操作系统/TIM截图20180908143248.png" alt="TIM截图20180908143248"></p><p>​    段页式存储的特点，以及运作的方法</p><p>​    页式存储的物理地址与逻辑地址的转化<img src="/2018/09/10/操作系统/TIM截图20180908150412.png" alt="TIM截图20180908150412"></p><p><img src="/2018/09/10/操作系统/TIM截图20180908150515.png" alt="TIM截图20180908150515"></p><p>按照逻辑结构来划分段号，划分的段是不均匀的。</p><p>固定分区管理方案： 固定分区是一种静态分区方式，在系统生成时已将主存区划分为若干个分区，每个分区的大小可不等。操作系统通过主存分配情况表管理主存区。问题：已分配区中存在未用空间，原因是程序或作业的大小不可能都刚好等于分区的大小，造成了空间的浪费。通常将已经分配分区的未用空间叫做零头或内碎片。</p><p>请求分页存储管理：将一个进程的地址空间划分为若干个大小相等的区域。称为页。相应的，将主存空阿金划分成与页相同大小的若干个物理块，称为块或页框。在为进程分配主存时，只装入若干页的用户进程和数据而非全部程序，就可以启动运行，而且若干页分别装入多个不相邻的物理块中。当访问的页面不在主存中，产生缺页中断，系统通过调页功能和页面置换功能，陆续将要使用的页面调入主存区，同时把暂不运行的页面置换到外存上。因此该方案当一个作业的程序地址空间大于主存空间可以使用的空间时，也可以执行</p><p>​    覆盖技术指的是让作业中不同时运行的程序模块共同使用统一贮存区域。这样，不必将程序完全装入到主存区就可以运行。当运行中调用另一个模块时，再从辅存中调入这个模块而将原来已经运行完成的程序模块覆盖，即装入到同一存储区域内。对此要求用户明确地描述作业中各个程序模块间的调用关系，这将加重用户负担。</p><p>文件管理：</p><p>​    索引文件结构</p><p>​    （13 个 索引节点   0-12）</p><p>​        直接索引</p><p>​        一级间接索引</p><p>​        二级间接索引</p><p>​        三级间接索引</p><p>​        文件本身的扩展</p><p><img src="/2018/09/10/操作系统/TIM截图20180908154050.png" alt="TIM截图20180908151251"></p><p>文件和树型目录结构</p><p>文件属性： R  read  只读文件属性</p><p>​           A   存档属性</p><p>​            S  系统文件</p><p>​             H  隐藏文件</p><p>文件名的组成:  驱动器号+路径+主文件名+扩展名</p><p>绝对路径： 从盘符开始的路径</p><p>相对路径： 从当前路径开始的路径</p><p>微内核操作系统：</p><p>​    </p><table><thead><tr><th>实质</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>将图形，设备驱动以及文件系统等功能全部在内核中实现，运行在内核状态和同一地址空间</td><td>减少进程间通信和状态切换的系统开销，获得较高的运行效率</td><td>内核庞大，占用资源较多且不易剪裁。系统的稳定性和安全性不好</td></tr><tr><td>只实现基本功能，将图形系统，文件系统，设备驱动以及通信功能放在内核之外</td><td>内核精炼，便于剪裁和移植。系统服务程序运行在用户地址空间，系统的可靠性，稳定性和安全性较高。可用于分布式系统</td><td>用户状态和内核状态需要频繁切换，从而导致系统效率不如单体内核</td></tr></tbody></table><p>分为用户态和核心态</p><p>​    用户态包括： 客户进程，进程服务器，终端服务器，文件服务器，存储器服务器等</p><p>​    核心态包括：（主要是内核中的内容）</p><p>用户态和核心态之间会有交互。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;5-7&lt;/p&gt;
&lt;p&gt;​    操作系统：&lt;/p&gt;
&lt;p&gt;​    管理系统的软硬件，数据资源&lt;/p&gt;
&lt;p&gt;​    控制程序运行&lt;/p&gt;
&lt;p&gt;​    人机之间的接口&lt;/p&gt;
&lt;p&gt;​    应用软件与硬件之间的接口&lt;/p&gt;
&lt;p&gt;包括：     进程管理  存储管理
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>uml</title>
    <link href="http://yoursite.com/2018/09/10/uml-1/"/>
    <id>http://yoursite.com/2018/09/10/uml-1/</id>
    <published>2018-09-10T02:17:35.000Z</published>
    <updated>2018-09-10T02:27:37.573Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发模型：</p><p>瀑布模型给出了软件生存周期中制定开发计划，需求分析，软件设计，编码，测试和维护等阶段以及各阶段的固定顺序，上一阶段完成后才能够进行到下一阶段，整个过程如同瀑布流水。该模型为软件的开发和维护提供了一种有效的管理模式，但在大量的实践中暴露出其缺点,其中最突出的时缺乏灵活性。特别是无法解决软件需求不明确或不准确的问题，所以瀑布模型适用于需求明确，且很少发生较大变化的项目。</p><p> 为了克服瀑布模型的缺点，演化模型允许在获取了一组基本需求之后，通过快速法分析构造出软件的初始可运行版本（原型），然后根据用户在适用原型的过程中提出的意见对原型进行改进，从而获得原型的新版本。这一过程重复进行指导得到令用户满意的软件。该模型和螺旋模型，喷泉模型等使用与对软件需求缺乏明确认识的项目。</p><p>​    螺旋模型是将瀑布模型和演化模型进行结合，在保持二者有点的同时增加了风险分析，从而弥补了二者的不足，该模型沿着螺旋旋转，并通过笛卡尔坐标的四个象限分别表示四个方面的活动：制定计划，风险分析，实施工程和客户评估。螺旋模型为项目管理人员及时调整管理决策提供了方便，进而可以降低开发风险。</p><p>​    喷泉模型是以面向对象的软件开发方法为基础，以用户需求为动力，以对象来驱动的模型。该模型主要用于描述面向对象的开发过程，体现了面型对象开发过程的迭代和无间隙特性。迭代指模型中的活动通常需要重复多次，相关功能在每次迭代中被加入新的系统。无间隙是指在各开发活动之间没有明显边界。</p><p><img src="/2018/09/10/uml-1/TIM截图20180908181147.png" alt="TIM截图20180908181147"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件开发模型：&lt;/p&gt;
&lt;p&gt;瀑布模型给出了软件生存周期中制定开发计划，需求分析，软件设计，编码，测试和维护等阶段以及各阶段的固定顺序，上一阶段完成后才能够进行到下一阶段，整个过程如同瀑布流水。该模型为软件的开发和维护提供了一种有效的管理模式，但在大量的实践中暴露出其缺点,
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="uml" scheme="http://yoursite.com/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/27/hello-world/"/>
    <id>http://yoursite.com/2018/07/27/hello-world/</id>
    <published>2018-07-27T00:28:06.439Z</published>
    <updated>2018-08-12T08:12:33.134Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
