<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Myzss blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-10T02:36:13.731Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Myzss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统</title>
    <link href="http://yoursite.com/2018/09/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/09/10/操作系统/</id>
    <published>2018-09-10T02:29:01.000Z</published>
    <updated>2018-09-10T02:36:13.731Z</updated>
    
    <content type="html"><![CDATA[<p>5-7</p><p>​    操作系统：</p><p>​    管理系统的软硬件，数据资源</p><p>​    控制程序运行</p><p>​    人机之间的接口</p><p>​    应用软件与硬件之间的接口</p><p>包括：     进程管理  存储管理   文件管理  作业管理   设备管理</p><p>​    </p><table><thead><tr><th>进程管理</th><th>进程的状态  前趋图   PV操作   死锁问题</th></tr></thead><tbody><tr><td>存储管理</td><td>段页式存储     页面置换算法</td></tr><tr><td>文件管理</td><td>索引文件    位示图</td></tr><tr><td>作业管理</td><td></td></tr><tr><td>设备管理</td><td></td></tr><tr><td>微内核操作系统</td><td>虚设备与SPOOLING技术</td></tr></tbody></table><p><img src="/2018/09/10/操作系统/TIM截图20180908094850.png" alt="TIM截图20180908094850"></p><p>前驱图：<img src="/2018/09/10/操作系统/Users\123\Desktop\新建文件夹\TIM截图20180908095932.png" alt="TIM截图20180908095932"></p><p>PV操作——进程管理</p><p>​    临界资源：各个进程间需要互斥方式对其进行共享的资源如打印机，磁带机‘</p><p>​    临界区：每个进程中访问临界资源的那段代码称为临界区</p><p>​    信号量： 是一种特殊的变量</p><p><img src="/2018/09/10/操作系统/TIM截图20180908132701.png" alt="TIM截图20180908132701"></p><p>死锁问题：    </p><p>​    如果一个进程在等待一件不可能发生的事，则进程就死锁了</p><p>而如果一个或多个进程产生死锁，就会造成系统死锁</p><p>死锁的预防：打破死锁的四个条件</p><p>​    互斥+环路等待+不剥夺+保持和等待</p><p>死锁的避免：有序资源分配，银行家算法</p><p>银行家算法：分配资源的原则</p><p>​    当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程</p><p>​    进程可以分期请求资源，但请求的总数不能超过最大需求量</p><p>​    当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间内得到资源。<img src="/2018/09/10/操作系统/TIM截图20180908142258.png" alt="TIM截图20180908142258"></p><p>存取存储组织：</p><p>​    <img src="/2018/09/10/操作系统/TIM截图20180908143248.png" alt="TIM截图20180908143248"></p><p>​    段页式存储的特点，以及运作的方法</p><p>​    页式存储的物理地址与逻辑地址的转化<img src="/2018/09/10/操作系统/TIM截图20180908150412.png" alt="TIM截图20180908150412"></p><p><img src="/2018/09/10/操作系统/TIM截图20180908150515.png" alt="TIM截图20180908150515"></p><p>按照逻辑结构来划分段号，划分的段是不均匀的。</p><p>固定分区管理方案： 固定分区是一种静态分区方式，在系统生成时已将主存区划分为若干个分区，每个分区的大小可不等。操作系统通过主存分配情况表管理主存区。问题：已分配区中存在未用空间，原因是程序或作业的大小不可能都刚好等于分区的大小，造成了空间的浪费。通常将已经分配分区的未用空间叫做零头或内碎片。</p><p>请求分页存储管理：将一个进程的地址空间划分为若干个大小相等的区域。称为页。相应的，将主存空阿金划分成与页相同大小的若干个物理块，称为块或页框。在为进程分配主存时，只装入若干页的用户进程和数据而非全部程序，就可以启动运行，而且若干页分别装入多个不相邻的物理块中。当访问的页面不在主存中，产生缺页中断，系统通过调页功能和页面置换功能，陆续将要使用的页面调入主存区，同时把暂不运行的页面置换到外存上。因此该方案当一个作业的程序地址空间大于主存空间可以使用的空间时，也可以执行</p><p>​    覆盖技术指的是让作业中不同时运行的程序模块共同使用统一贮存区域。这样，不必将程序完全装入到主存区就可以运行。当运行中调用另一个模块时，再从辅存中调入这个模块而将原来已经运行完成的程序模块覆盖，即装入到同一存储区域内。对此要求用户明确地描述作业中各个程序模块间的调用关系，这将加重用户负担。</p><p>文件管理：</p><p>​    索引文件结构</p><p>​    （13 个 索引节点   0-12）</p><p>​        直接索引</p><p>​        一级间接索引</p><p>​        二级间接索引</p><p>​        三级间接索引</p><p>​        文件本身的扩展</p><p><img src="/2018/09/10/操作系统/TIM截图20180908154050.png" alt="TIM截图20180908151251"></p><p>文件和树型目录结构</p><p>文件属性： R  read  只读文件属性</p><p>​           A   存档属性</p><p>​            S  系统文件</p><p>​             H  隐藏文件</p><p>文件名的组成:  驱动器号+路径+主文件名+扩展名</p><p>绝对路径： 从盘符开始的路径</p><p>相对路径： 从当前路径开始的路径</p><p>微内核操作系统：</p><p>​    </p><table><thead><tr><th>实质</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>将图形，设备驱动以及文件系统等功能全部在内核中实现，运行在内核状态和同一地址空间</td><td>减少进程间通信和状态切换的系统开销，获得较高的运行效率</td><td>内核庞大，占用资源较多且不易剪裁。系统的稳定性和安全性不好</td></tr><tr><td>只实现基本功能，将图形系统，文件系统，设备驱动以及通信功能放在内核之外</td><td>内核精炼，便于剪裁和移植。系统服务程序运行在用户地址空间，系统的可靠性，稳定性和安全性较高。可用于分布式系统</td><td>用户状态和内核状态需要频繁切换，从而导致系统效率不如单体内核</td></tr></tbody></table><p>分为用户态和核心态</p><p>​    用户态包括： 客户进程，进程服务器，终端服务器，文件服务器，存储器服务器等</p><p>​    核心态包括：（主要是内核中的内容）</p><p>用户态和核心态之间会有交互。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;5-7&lt;/p&gt;
&lt;p&gt;​    操作系统：&lt;/p&gt;
&lt;p&gt;​    管理系统的软硬件，数据资源&lt;/p&gt;
&lt;p&gt;​    控制程序运行&lt;/p&gt;
&lt;p&gt;​    人机之间的接口&lt;/p&gt;
&lt;p&gt;​    应用软件与硬件之间的接口&lt;/p&gt;
&lt;p&gt;包括：     进程管理  存储管理
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>uml</title>
    <link href="http://yoursite.com/2018/09/10/uml-1/"/>
    <id>http://yoursite.com/2018/09/10/uml-1/</id>
    <published>2018-09-10T02:17:35.000Z</published>
    <updated>2018-09-10T02:27:37.573Z</updated>
    
    <content type="html"><![CDATA[<p>软件开发模型：</p><p>瀑布模型给出了软件生存周期中制定开发计划，需求分析，软件设计，编码，测试和维护等阶段以及各阶段的固定顺序，上一阶段完成后才能够进行到下一阶段，整个过程如同瀑布流水。该模型为软件的开发和维护提供了一种有效的管理模式，但在大量的实践中暴露出其缺点,其中最突出的时缺乏灵活性。特别是无法解决软件需求不明确或不准确的问题，所以瀑布模型适用于需求明确，且很少发生较大变化的项目。</p><p> 为了克服瀑布模型的缺点，演化模型允许在获取了一组基本需求之后，通过快速法分析构造出软件的初始可运行版本（原型），然后根据用户在适用原型的过程中提出的意见对原型进行改进，从而获得原型的新版本。这一过程重复进行指导得到令用户满意的软件。该模型和螺旋模型，喷泉模型等使用与对软件需求缺乏明确认识的项目。</p><p>​    螺旋模型是将瀑布模型和演化模型进行结合，在保持二者有点的同时增加了风险分析，从而弥补了二者的不足，该模型沿着螺旋旋转，并通过笛卡尔坐标的四个象限分别表示四个方面的活动：制定计划，风险分析，实施工程和客户评估。螺旋模型为项目管理人员及时调整管理决策提供了方便，进而可以降低开发风险。</p><p>​    喷泉模型是以面向对象的软件开发方法为基础，以用户需求为动力，以对象来驱动的模型。该模型主要用于描述面向对象的开发过程，体现了面型对象开发过程的迭代和无间隙特性。迭代指模型中的活动通常需要重复多次，相关功能在每次迭代中被加入新的系统。无间隙是指在各开发活动之间没有明显边界。</p><p><img src="/2018/09/10/uml-1/TIM截图20180908181147.png" alt="TIM截图20180908181147"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件开发模型：&lt;/p&gt;
&lt;p&gt;瀑布模型给出了软件生存周期中制定开发计划，需求分析，软件设计，编码，测试和维护等阶段以及各阶段的固定顺序，上一阶段完成后才能够进行到下一阶段，整个过程如同瀑布流水。该模型为软件的开发和维护提供了一种有效的管理模式，但在大量的实践中暴露出其缺点,
      
    
    </summary>
    
      <category term="软考笔记" scheme="http://yoursite.com/categories/%E8%BD%AF%E8%80%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="uml" scheme="http://yoursite.com/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/27/hello-world/"/>
    <id>http://yoursite.com/2018/07/27/hello-world/</id>
    <published>2018-07-27T00:28:06.439Z</published>
    <updated>2018-08-12T08:12:33.134Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
